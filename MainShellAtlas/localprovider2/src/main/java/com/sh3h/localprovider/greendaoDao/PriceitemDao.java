package com.sh3h.localprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sh3h.localprovider.greendaoEntity.Priceitem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MR_PRICEITEM".
*/
public class PriceitemDao extends AbstractDao<Priceitem, Long> {

    public static final String TABLENAME = "MR_PRICEITEM";

    /**
     * Properties of entity Priceitem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PRICE_ITEM_ID = new Property(0, Long.class, "PRICE_ITEM_ID", true, "_id");
        public final static Property PRICE_ITEM_NAME = new Property(1, String.class, "PRICE_ITEM_NAME", false, "PRICE__ITEM__NAME");
        public final static Property PRICE_ITEM_CATEGORY = new Property(2, int.class, "PRICE_ITEM_CATEGORY", false, "PRICE__ITEM__CATEGORY");
        public final static Property REMARK = new Property(3, String.class, "REMARK", false, "REMARK");
    }


    public PriceitemDao(DaoConfig config) {
        super(config);
    }
    
    public PriceitemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MR_PRICEITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: PRICE_ITEM_ID
                "\"PRICE__ITEM__NAME\" TEXT NOT NULL ," + // 1: PRICE_ITEM_NAME
                "\"PRICE__ITEM__CATEGORY\" INTEGER NOT NULL ," + // 2: PRICE_ITEM_CATEGORY
                "\"REMARK\" TEXT);"); // 3: REMARK
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MR_PRICEITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Priceitem entity) {
        stmt.clearBindings();
 
        Long PRICE_ITEM_ID = entity.getPRICE_ITEM_ID();
        if (PRICE_ITEM_ID != null) {
            stmt.bindLong(1, PRICE_ITEM_ID);
        }
        stmt.bindString(2, entity.getPRICE_ITEM_NAME());
        stmt.bindLong(3, entity.getPRICE_ITEM_CATEGORY());
 
        String REMARK = entity.getREMARK();
        if (REMARK != null) {
            stmt.bindString(4, REMARK);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Priceitem entity) {
        stmt.clearBindings();
 
        Long PRICE_ITEM_ID = entity.getPRICE_ITEM_ID();
        if (PRICE_ITEM_ID != null) {
            stmt.bindLong(1, PRICE_ITEM_ID);
        }
        stmt.bindString(2, entity.getPRICE_ITEM_NAME());
        stmt.bindLong(3, entity.getPRICE_ITEM_CATEGORY());
 
        String REMARK = entity.getREMARK();
        if (REMARK != null) {
            stmt.bindString(4, REMARK);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Priceitem readEntity(Cursor cursor, int offset) {
        Priceitem entity = new Priceitem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // PRICE_ITEM_ID
            cursor.getString(offset + 1), // PRICE_ITEM_NAME
            cursor.getInt(offset + 2), // PRICE_ITEM_CATEGORY
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // REMARK
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Priceitem entity, int offset) {
        entity.setPRICE_ITEM_ID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPRICE_ITEM_NAME(cursor.getString(offset + 1));
        entity.setPRICE_ITEM_CATEGORY(cursor.getInt(offset + 2));
        entity.setREMARK(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Priceitem entity, long rowId) {
        entity.setPRICE_ITEM_ID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Priceitem entity) {
        if(entity != null) {
            return entity.getPRICE_ITEM_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Priceitem entity) {
        return entity.getPRICE_ITEM_ID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.sh3h.localprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sh3h.localprovider.greendaoEntity.MeterModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MR_METERMODEL".
*/
public class MeterModelDao extends AbstractDao<MeterModel, Integer> {

    public static final String TABLENAME = "MR_METERMODEL";

    /**
     * Properties of entity MeterModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MODEL_ID = new Property(0, int.class, "MODEL_ID", true, "MODEL__ID");
        public final static Property MODEL_NAME = new Property(1, String.class, "MODEL_NAME", false, "MODEL__NAME");
        public final static Property MODEL_BRIEF_NAME = new Property(2, String.class, "MODEL_BRIEF_NAME", false, "MODEL__BRIEF__NAME");
        public final static Property MODEL_REMARK = new Property(3, String.class, "MODEL_REMARK", false, "MODEL__REMARK");
    }


    public MeterModelDao(DaoConfig config) {
        super(config);
    }
    
    public MeterModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MR_METERMODEL\" (" + //
                "\"MODEL__ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: MODEL_ID
                "\"MODEL__NAME\" TEXT NOT NULL ," + // 1: MODEL_NAME
                "\"MODEL__BRIEF__NAME\" TEXT NOT NULL ," + // 2: MODEL_BRIEF_NAME
                "\"MODEL__REMARK\" TEXT);"); // 3: MODEL_REMARK
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MR_METERMODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MeterModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getMODEL_ID());
        stmt.bindString(2, entity.getMODEL_NAME());
        stmt.bindString(3, entity.getMODEL_BRIEF_NAME());
 
        String MODEL_REMARK = entity.getMODEL_REMARK();
        if (MODEL_REMARK != null) {
            stmt.bindString(4, MODEL_REMARK);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MeterModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getMODEL_ID());
        stmt.bindString(2, entity.getMODEL_NAME());
        stmt.bindString(3, entity.getMODEL_BRIEF_NAME());
 
        String MODEL_REMARK = entity.getMODEL_REMARK();
        if (MODEL_REMARK != null) {
            stmt.bindString(4, MODEL_REMARK);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public MeterModel readEntity(Cursor cursor, int offset) {
        MeterModel entity = new MeterModel( //
            cursor.getInt(offset + 0), // MODEL_ID
            cursor.getString(offset + 1), // MODEL_NAME
            cursor.getString(offset + 2), // MODEL_BRIEF_NAME
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // MODEL_REMARK
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MeterModel entity, int offset) {
        entity.setMODEL_ID(cursor.getInt(offset + 0));
        entity.setMODEL_NAME(cursor.getString(offset + 1));
        entity.setMODEL_BRIEF_NAME(cursor.getString(offset + 2));
        entity.setMODEL_REMARK(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(MeterModel entity, long rowId) {
        return entity.getMODEL_ID();
    }
    
    @Override
    public Integer getKey(MeterModel entity) {
        if(entity != null) {
            return entity.getMODEL_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MeterModel entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

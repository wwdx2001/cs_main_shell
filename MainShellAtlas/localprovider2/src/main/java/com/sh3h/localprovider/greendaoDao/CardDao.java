package com.sh3h.localprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sh3h.localprovider.greendaoEntity.Card;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MR_CARD".
*/
public class CardDao extends AbstractDao<Card, Long> {

    public static final String TABLENAME = "MR_CARD";

    /**
     * Properties of entity Card.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "ID");
        public final static Property CARD_ID = new Property(1, String.class, "CARD_ID", false, "CARD__ID");
        public final static Property CARD_NAME = new Property(2, String.class, "CARD_NAME", false, "CARD__NAME");
        public final static Property CARD_ADDRESS = new Property(3, String.class, "CARD_ADDRESS", false, "CARD__ADDRESS");
        public final static Property BOOK_ID = new Property(4, String.class, "BOOK_ID", false, "BOOK__ID");
        public final static Property BOOK_SORT_INDEX = new Property(5, int.class, "BOOK_SORT_INDEX", false, "BOOK__SORT__INDEX");
        public final static Property CUSTOMER_ID = new Property(6, String.class, "CUSTOMER_ID", false, "CUSTOMER__ID");
        public final static Property SUBCOM_CODE = new Property(7, String.class, "SUBCOM_CODE", false, "SUBCOM__CODE");
        public final static Property MOBILE1 = new Property(8, String.class, "MOBILE1", false, "MOBILE1");
        public final static Property MOBILE2 = new Property(9, String.class, "MOBILE2", false, "MOBILE2");
        public final static Property MOBILE3 = new Property(10, String.class, "MOBILE3", false, "MOBILE3");
        public final static Property Tel1 = new Property(11, String.class, "tel1", false, "TEL1");
        public final static Property Tel2 = new Property(12, String.class, "tel2", false, "TEL2");
        public final static Property Tel3 = new Property(13, String.class, "tel3", false, "TEL3");
        public final static Property PAY_METHOD = new Property(14, int.class, "PAY_METHOD", false, "PAY__METHOD");
        public final static Property PRICE_CODE = new Property(15, int.class, "PRICE_CODE", false, "PRICE__CODE");
        public final static Property METERCARD_STATE = new Property(16, int.class, "METERCARD_STATE", false, "METERCARD__STATE");
        public final static Property CREATE_DATE = new Property(17, long.class, "CREATE_DATE", false, "CREATE__DATE");
        public final static Property INSTALL_POSITION = new Property(18, String.class, "INSTALL_POSITION", false, "INSTALL__POSITION");
        public final static Property SEAL_NUMBER = new Property(19, String.class, "SEAL_NUMBER", false, "SEAL__NUMBER");
        public final static Property BAR_CODE = new Property(20, String.class, "BAR_CODE", false, "BAR__CODE");
        public final static Property CALIBER_ID = new Property(21, int.class, "CALIBER_ID", false, "CALIBER__ID");
        public final static Property CALIBER_RANGE_ID = new Property(22, int.class, "CALIBER_RANGE_ID", false, "CALIBER__RANGE__ID");
        public final static Property MODEL_ID = new Property(23, int.class, "MODEL_ID", false, "MODEL__ID");
        public final static Property PRODUCER_ID = new Property(24, int.class, "PRODUCER_ID", false, "PRODUCER__ID");
        public final static Property METER_TYPE = new Property(25, int.class, "METER_TYPE", false, "METER__TYPE");
        public final static Property METER_TYPE2 = new Property(26, int.class, "METER_TYPE2", false, "METER__TYPE2");
        public final static Property MAIN_CARD_ID = new Property(27, String.class, "MAIN_CARD_ID", false, "MAIN__CARD__ID");
        public final static Property INSTALL_DATE = new Property(28, long.class, "INSTALL_DATE", false, "INSTALL__DATE");
        public final static Property REPLACE_DATE = new Property(29, long.class, "REPLACE_DATE", false, "REPLACE__DATE");
        public final static Property INITIATE_READING = new Property(30, int.class, "INITIATE_READING", false, "INITIATE__READING");
        public final static Property TERMINATE_READING = new Property(31, int.class, "TERMINATE_READING", false, "TERMINATE__READING");
        public final static Property METER_STATE = new Property(32, int.class, "METER_STATE", false, "METER__STATE");
        public final static Property PERSON_COUNT = new Property(33, int.class, "PERSON_COUNT", false, "PERSON__COUNT");
        public final static Property LOCATION_LG = new Property(34, double.class, "LOCATION_LG", false, "LOCATION__LG");
        public final static Property LOCATION_LT = new Property(35, double.class, "LOCATION_LT", false, "LOCATION__LT");
        public final static Property DOWNLOAD_TYPE = new Property(36, int.class, "DOWNLOAD_TYPE", false, "DOWNLOAD__TYPE");
        public final static Property IS_MODIFIED = new Property(37, int.class, "IS_MODIFIED", false, "IS__MODIFIED");
        public final static Property IS_UPLPADED = new Property(38, int.class, "IS_UPLPADED", false, "IS__UPLPADED");
        public final static Property EXTEND = new Property(39, String.class, "EXTEND", false, "EXTEND");
    }


    public CardDao(DaoConfig config) {
        super(config);
    }
    
    public CardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MR_CARD\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"CARD__ID\" TEXT NOT NULL ," + // 1: CARD_ID
                "\"CARD__NAME\" TEXT NOT NULL ," + // 2: CARD_NAME
                "\"CARD__ADDRESS\" TEXT NOT NULL ," + // 3: CARD_ADDRESS
                "\"BOOK__ID\" TEXT NOT NULL ," + // 4: BOOK_ID
                "\"BOOK__SORT__INDEX\" INTEGER NOT NULL ," + // 5: BOOK_SORT_INDEX
                "\"CUSTOMER__ID\" TEXT NOT NULL ," + // 6: CUSTOMER_ID
                "\"SUBCOM__CODE\" TEXT NOT NULL ," + // 7: SUBCOM_CODE
                "\"MOBILE1\" TEXT," + // 8: MOBILE1
                "\"MOBILE2\" TEXT," + // 9: MOBILE2
                "\"MOBILE3\" TEXT," + // 10: MOBILE3
                "\"TEL1\" TEXT," + // 11: tel1
                "\"TEL2\" TEXT," + // 12: tel2
                "\"TEL3\" TEXT," + // 13: tel3
                "\"PAY__METHOD\" INTEGER NOT NULL ," + // 14: PAY_METHOD
                "\"PRICE__CODE\" INTEGER NOT NULL ," + // 15: PRICE_CODE
                "\"METERCARD__STATE\" INTEGER NOT NULL ," + // 16: METERCARD_STATE
                "\"CREATE__DATE\" INTEGER NOT NULL ," + // 17: CREATE_DATE
                "\"INSTALL__POSITION\" TEXT NOT NULL ," + // 18: INSTALL_POSITION
                "\"SEAL__NUMBER\" TEXT NOT NULL ," + // 19: SEAL_NUMBER
                "\"BAR__CODE\" TEXT NOT NULL ," + // 20: BAR_CODE
                "\"CALIBER__ID\" INTEGER NOT NULL ," + // 21: CALIBER_ID
                "\"CALIBER__RANGE__ID\" INTEGER NOT NULL ," + // 22: CALIBER_RANGE_ID
                "\"MODEL__ID\" INTEGER NOT NULL ," + // 23: MODEL_ID
                "\"PRODUCER__ID\" INTEGER NOT NULL ," + // 24: PRODUCER_ID
                "\"METER__TYPE\" INTEGER NOT NULL ," + // 25: METER_TYPE
                "\"METER__TYPE2\" INTEGER NOT NULL ," + // 26: METER_TYPE2
                "\"MAIN__CARD__ID\" TEXT NOT NULL ," + // 27: MAIN_CARD_ID
                "\"INSTALL__DATE\" INTEGER NOT NULL ," + // 28: INSTALL_DATE
                "\"REPLACE__DATE\" INTEGER NOT NULL ," + // 29: REPLACE_DATE
                "\"INITIATE__READING\" INTEGER NOT NULL ," + // 30: INITIATE_READING
                "\"TERMINATE__READING\" INTEGER NOT NULL ," + // 31: TERMINATE_READING
                "\"METER__STATE\" INTEGER NOT NULL ," + // 32: METER_STATE
                "\"PERSON__COUNT\" INTEGER NOT NULL ," + // 33: PERSON_COUNT
                "\"LOCATION__LG\" REAL NOT NULL ," + // 34: LOCATION_LG
                "\"LOCATION__LT\" REAL NOT NULL ," + // 35: LOCATION_LT
                "\"DOWNLOAD__TYPE\" INTEGER NOT NULL ," + // 36: DOWNLOAD_TYPE
                "\"IS__MODIFIED\" INTEGER NOT NULL ," + // 37: IS_MODIFIED
                "\"IS__UPLPADED\" INTEGER NOT NULL ," + // 38: IS_UPLPADED
                "\"EXTEND\" TEXT);"); // 39: EXTEND
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MR_CARD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Card entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindString(2, entity.getCARD_ID());
        stmt.bindString(3, entity.getCARD_NAME());
        stmt.bindString(4, entity.getCARD_ADDRESS());
        stmt.bindString(5, entity.getBOOK_ID());
        stmt.bindLong(6, entity.getBOOK_SORT_INDEX());
        stmt.bindString(7, entity.getCUSTOMER_ID());
        stmt.bindString(8, entity.getSUBCOM_CODE());
 
        String MOBILE1 = entity.getMOBILE1();
        if (MOBILE1 != null) {
            stmt.bindString(9, MOBILE1);
        }
 
        String MOBILE2 = entity.getMOBILE2();
        if (MOBILE2 != null) {
            stmt.bindString(10, MOBILE2);
        }
 
        String MOBILE3 = entity.getMOBILE3();
        if (MOBILE3 != null) {
            stmt.bindString(11, MOBILE3);
        }
 
        String tel1 = entity.getTel1();
        if (tel1 != null) {
            stmt.bindString(12, tel1);
        }
 
        String tel2 = entity.getTel2();
        if (tel2 != null) {
            stmt.bindString(13, tel2);
        }
 
        String tel3 = entity.getTel3();
        if (tel3 != null) {
            stmt.bindString(14, tel3);
        }
        stmt.bindLong(15, entity.getPAY_METHOD());
        stmt.bindLong(16, entity.getPRICE_CODE());
        stmt.bindLong(17, entity.getMETERCARD_STATE());
        stmt.bindLong(18, entity.getCREATE_DATE());
        stmt.bindString(19, entity.getINSTALL_POSITION());
        stmt.bindString(20, entity.getSEAL_NUMBER());
        stmt.bindString(21, entity.getBAR_CODE());
        stmt.bindLong(22, entity.getCALIBER_ID());
        stmt.bindLong(23, entity.getCALIBER_RANGE_ID());
        stmt.bindLong(24, entity.getMODEL_ID());
        stmt.bindLong(25, entity.getPRODUCER_ID());
        stmt.bindLong(26, entity.getMETER_TYPE());
        stmt.bindLong(27, entity.getMETER_TYPE2());
        stmt.bindString(28, entity.getMAIN_CARD_ID());
        stmt.bindLong(29, entity.getINSTALL_DATE());
        stmt.bindLong(30, entity.getREPLACE_DATE());
        stmt.bindLong(31, entity.getINITIATE_READING());
        stmt.bindLong(32, entity.getTERMINATE_READING());
        stmt.bindLong(33, entity.getMETER_STATE());
        stmt.bindLong(34, entity.getPERSON_COUNT());
        stmt.bindDouble(35, entity.getLOCATION_LG());
        stmt.bindDouble(36, entity.getLOCATION_LT());
        stmt.bindLong(37, entity.getDOWNLOAD_TYPE());
        stmt.bindLong(38, entity.getIS_MODIFIED());
        stmt.bindLong(39, entity.getIS_UPLPADED());
 
        String EXTEND = entity.getEXTEND();
        if (EXTEND != null) {
            stmt.bindString(40, EXTEND);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Card entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindString(2, entity.getCARD_ID());
        stmt.bindString(3, entity.getCARD_NAME());
        stmt.bindString(4, entity.getCARD_ADDRESS());
        stmt.bindString(5, entity.getBOOK_ID());
        stmt.bindLong(6, entity.getBOOK_SORT_INDEX());
        stmt.bindString(7, entity.getCUSTOMER_ID());
        stmt.bindString(8, entity.getSUBCOM_CODE());
 
        String MOBILE1 = entity.getMOBILE1();
        if (MOBILE1 != null) {
            stmt.bindString(9, MOBILE1);
        }
 
        String MOBILE2 = entity.getMOBILE2();
        if (MOBILE2 != null) {
            stmt.bindString(10, MOBILE2);
        }
 
        String MOBILE3 = entity.getMOBILE3();
        if (MOBILE3 != null) {
            stmt.bindString(11, MOBILE3);
        }
 
        String tel1 = entity.getTel1();
        if (tel1 != null) {
            stmt.bindString(12, tel1);
        }
 
        String tel2 = entity.getTel2();
        if (tel2 != null) {
            stmt.bindString(13, tel2);
        }
 
        String tel3 = entity.getTel3();
        if (tel3 != null) {
            stmt.bindString(14, tel3);
        }
        stmt.bindLong(15, entity.getPAY_METHOD());
        stmt.bindLong(16, entity.getPRICE_CODE());
        stmt.bindLong(17, entity.getMETERCARD_STATE());
        stmt.bindLong(18, entity.getCREATE_DATE());
        stmt.bindString(19, entity.getINSTALL_POSITION());
        stmt.bindString(20, entity.getSEAL_NUMBER());
        stmt.bindString(21, entity.getBAR_CODE());
        stmt.bindLong(22, entity.getCALIBER_ID());
        stmt.bindLong(23, entity.getCALIBER_RANGE_ID());
        stmt.bindLong(24, entity.getMODEL_ID());
        stmt.bindLong(25, entity.getPRODUCER_ID());
        stmt.bindLong(26, entity.getMETER_TYPE());
        stmt.bindLong(27, entity.getMETER_TYPE2());
        stmt.bindString(28, entity.getMAIN_CARD_ID());
        stmt.bindLong(29, entity.getINSTALL_DATE());
        stmt.bindLong(30, entity.getREPLACE_DATE());
        stmt.bindLong(31, entity.getINITIATE_READING());
        stmt.bindLong(32, entity.getTERMINATE_READING());
        stmt.bindLong(33, entity.getMETER_STATE());
        stmt.bindLong(34, entity.getPERSON_COUNT());
        stmt.bindDouble(35, entity.getLOCATION_LG());
        stmt.bindDouble(36, entity.getLOCATION_LT());
        stmt.bindLong(37, entity.getDOWNLOAD_TYPE());
        stmt.bindLong(38, entity.getIS_MODIFIED());
        stmt.bindLong(39, entity.getIS_UPLPADED());
 
        String EXTEND = entity.getEXTEND();
        if (EXTEND != null) {
            stmt.bindString(40, EXTEND);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Card readEntity(Cursor cursor, int offset) {
        Card entity = new Card( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getString(offset + 1), // CARD_ID
            cursor.getString(offset + 2), // CARD_NAME
            cursor.getString(offset + 3), // CARD_ADDRESS
            cursor.getString(offset + 4), // BOOK_ID
            cursor.getInt(offset + 5), // BOOK_SORT_INDEX
            cursor.getString(offset + 6), // CUSTOMER_ID
            cursor.getString(offset + 7), // SUBCOM_CODE
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // MOBILE1
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // MOBILE2
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // MOBILE3
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // tel1
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // tel2
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // tel3
            cursor.getInt(offset + 14), // PAY_METHOD
            cursor.getInt(offset + 15), // PRICE_CODE
            cursor.getInt(offset + 16), // METERCARD_STATE
            cursor.getLong(offset + 17), // CREATE_DATE
            cursor.getString(offset + 18), // INSTALL_POSITION
            cursor.getString(offset + 19), // SEAL_NUMBER
            cursor.getString(offset + 20), // BAR_CODE
            cursor.getInt(offset + 21), // CALIBER_ID
            cursor.getInt(offset + 22), // CALIBER_RANGE_ID
            cursor.getInt(offset + 23), // MODEL_ID
            cursor.getInt(offset + 24), // PRODUCER_ID
            cursor.getInt(offset + 25), // METER_TYPE
            cursor.getInt(offset + 26), // METER_TYPE2
            cursor.getString(offset + 27), // MAIN_CARD_ID
            cursor.getLong(offset + 28), // INSTALL_DATE
            cursor.getLong(offset + 29), // REPLACE_DATE
            cursor.getInt(offset + 30), // INITIATE_READING
            cursor.getInt(offset + 31), // TERMINATE_READING
            cursor.getInt(offset + 32), // METER_STATE
            cursor.getInt(offset + 33), // PERSON_COUNT
            cursor.getDouble(offset + 34), // LOCATION_LG
            cursor.getDouble(offset + 35), // LOCATION_LT
            cursor.getInt(offset + 36), // DOWNLOAD_TYPE
            cursor.getInt(offset + 37), // IS_MODIFIED
            cursor.getInt(offset + 38), // IS_UPLPADED
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39) // EXTEND
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Card entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCARD_ID(cursor.getString(offset + 1));
        entity.setCARD_NAME(cursor.getString(offset + 2));
        entity.setCARD_ADDRESS(cursor.getString(offset + 3));
        entity.setBOOK_ID(cursor.getString(offset + 4));
        entity.setBOOK_SORT_INDEX(cursor.getInt(offset + 5));
        entity.setCUSTOMER_ID(cursor.getString(offset + 6));
        entity.setSUBCOM_CODE(cursor.getString(offset + 7));
        entity.setMOBILE1(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMOBILE2(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMOBILE3(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTel1(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTel2(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTel3(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPAY_METHOD(cursor.getInt(offset + 14));
        entity.setPRICE_CODE(cursor.getInt(offset + 15));
        entity.setMETERCARD_STATE(cursor.getInt(offset + 16));
        entity.setCREATE_DATE(cursor.getLong(offset + 17));
        entity.setINSTALL_POSITION(cursor.getString(offset + 18));
        entity.setSEAL_NUMBER(cursor.getString(offset + 19));
        entity.setBAR_CODE(cursor.getString(offset + 20));
        entity.setCALIBER_ID(cursor.getInt(offset + 21));
        entity.setCALIBER_RANGE_ID(cursor.getInt(offset + 22));
        entity.setMODEL_ID(cursor.getInt(offset + 23));
        entity.setPRODUCER_ID(cursor.getInt(offset + 24));
        entity.setMETER_TYPE(cursor.getInt(offset + 25));
        entity.setMETER_TYPE2(cursor.getInt(offset + 26));
        entity.setMAIN_CARD_ID(cursor.getString(offset + 27));
        entity.setINSTALL_DATE(cursor.getLong(offset + 28));
        entity.setREPLACE_DATE(cursor.getLong(offset + 29));
        entity.setINITIATE_READING(cursor.getInt(offset + 30));
        entity.setTERMINATE_READING(cursor.getInt(offset + 31));
        entity.setMETER_STATE(cursor.getInt(offset + 32));
        entity.setPERSON_COUNT(cursor.getInt(offset + 33));
        entity.setLOCATION_LG(cursor.getDouble(offset + 34));
        entity.setLOCATION_LT(cursor.getDouble(offset + 35));
        entity.setDOWNLOAD_TYPE(cursor.getInt(offset + 36));
        entity.setIS_MODIFIED(cursor.getInt(offset + 37));
        entity.setIS_UPLPADED(cursor.getInt(offset + 38));
        entity.setEXTEND(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Card entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Card entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Card entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

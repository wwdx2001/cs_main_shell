package com.sh3h.localprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sh3h.localprovider.greendaoEntity.PriceCategory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MR_PRICECATEGORY".
*/
public class PriceCategoryDao extends AbstractDao<PriceCategory, Long> {

    public static final String TABLENAME = "MR_PRICECATEGORY";

    /**
     * Properties of entity PriceCategory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PRICE_CATEGORY_ID = new Property(0, Long.class, "PRICE_CATEGORY_ID", true, "_id");
        public final static Property PRICE_CATEGORY_CODE = new Property(1, String.class, "PRICE_CATEGORY_CODE", false, "PRICE__CATEGORY__CODE");
        public final static Property PRICE_CATEGORY_NAME = new Property(2, String.class, "PRICE_CATEGORY_NAME", false, "PRICE__CATEGORY__NAME");
        public final static Property PRICE_CATEGORY_PARENT_ID = new Property(3, int.class, "PRICE_CATEGORY_PARENT_ID", false, "PRICE__CATEGORY__PARENT__ID");
        public final static Property PRICE_CATEGORY_SORT_INDEX = new Property(4, int.class, "PRICE_CATEGORY_SORT_INDEX", false, "PRICE__CATEGORY__SORT__INDEX");
    }


    public PriceCategoryDao(DaoConfig config) {
        super(config);
    }
    
    public PriceCategoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MR_PRICECATEGORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: PRICE_CATEGORY_ID
                "\"PRICE__CATEGORY__CODE\" TEXT NOT NULL ," + // 1: PRICE_CATEGORY_CODE
                "\"PRICE__CATEGORY__NAME\" TEXT NOT NULL ," + // 2: PRICE_CATEGORY_NAME
                "\"PRICE__CATEGORY__PARENT__ID\" INTEGER NOT NULL ," + // 3: PRICE_CATEGORY_PARENT_ID
                "\"PRICE__CATEGORY__SORT__INDEX\" INTEGER NOT NULL );"); // 4: PRICE_CATEGORY_SORT_INDEX
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MR_PRICECATEGORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PriceCategory entity) {
        stmt.clearBindings();
 
        Long PRICE_CATEGORY_ID = entity.getPRICE_CATEGORY_ID();
        if (PRICE_CATEGORY_ID != null) {
            stmt.bindLong(1, PRICE_CATEGORY_ID);
        }
        stmt.bindString(2, entity.getPRICE_CATEGORY_CODE());
        stmt.bindString(3, entity.getPRICE_CATEGORY_NAME());
        stmt.bindLong(4, entity.getPRICE_CATEGORY_PARENT_ID());
        stmt.bindLong(5, entity.getPRICE_CATEGORY_SORT_INDEX());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PriceCategory entity) {
        stmt.clearBindings();
 
        Long PRICE_CATEGORY_ID = entity.getPRICE_CATEGORY_ID();
        if (PRICE_CATEGORY_ID != null) {
            stmt.bindLong(1, PRICE_CATEGORY_ID);
        }
        stmt.bindString(2, entity.getPRICE_CATEGORY_CODE());
        stmt.bindString(3, entity.getPRICE_CATEGORY_NAME());
        stmt.bindLong(4, entity.getPRICE_CATEGORY_PARENT_ID());
        stmt.bindLong(5, entity.getPRICE_CATEGORY_SORT_INDEX());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PriceCategory readEntity(Cursor cursor, int offset) {
        PriceCategory entity = new PriceCategory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // PRICE_CATEGORY_ID
            cursor.getString(offset + 1), // PRICE_CATEGORY_CODE
            cursor.getString(offset + 2), // PRICE_CATEGORY_NAME
            cursor.getInt(offset + 3), // PRICE_CATEGORY_PARENT_ID
            cursor.getInt(offset + 4) // PRICE_CATEGORY_SORT_INDEX
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PriceCategory entity, int offset) {
        entity.setPRICE_CATEGORY_ID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPRICE_CATEGORY_CODE(cursor.getString(offset + 1));
        entity.setPRICE_CATEGORY_NAME(cursor.getString(offset + 2));
        entity.setPRICE_CATEGORY_PARENT_ID(cursor.getInt(offset + 3));
        entity.setPRICE_CATEGORY_SORT_INDEX(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PriceCategory entity, long rowId) {
        entity.setPRICE_CATEGORY_ID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PriceCategory entity) {
        if(entity != null) {
            return entity.getPRICE_CATEGORY_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PriceCategory entity) {
        return entity.getPRICE_CATEGORY_ID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

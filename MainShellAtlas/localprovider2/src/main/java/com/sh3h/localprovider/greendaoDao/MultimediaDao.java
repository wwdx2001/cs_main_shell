package com.sh3h.localprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sh3h.localprovider.greendaoEntity.Multimedia;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MR_MULTIMEDIA".
*/
public class MultimediaDao extends AbstractDao<Multimedia, Long> {

    public static final String TABLENAME = "MR_MULTIMEDIA";

    /**
     * Properties of entity Multimedia.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "ID");
        public final static Property FILE_TYPE = new Property(1, int.class, "FILE_TYPE", false, "FILE__TYPE");
        public final static Property FILE_NAME = new Property(2, String.class, "FILE_NAME", false, "FILE__NAME");
        public final static Property FILE_HASH = new Property(3, String.class, "FILE_HASH", false, "FILE__HASH");
        public final static Property FILE_URL = new Property(4, String.class, "FILE_URL", false, "FILE__URL");
        public final static Property UPLOAD_FLAG = new Property(5, int.class, "UPLOAD_FLAG", false, "UPLOAD__FLAG");
        public final static Property FILE_TIME = new Property(6, long.class, "FILE_TIME", false, "FILE__TIME");
        public final static Property METER_READER = new Property(7, int.class, "METER_READER", false, "METER__READER");
        public final static Property TASK_ID = new Property(8, int.class, "TASK_ID", false, "TASK__ID");
        public final static Property BOOK_ID = new Property(9, String.class, "BOOK_ID", false, "BOOK__ID");
        public final static Property RECORD_ID = new Property(10, int.class, "RECORD_ID", false, "RECORD__ID");
        public final static Property CARD_ID = new Property(11, String.class, "CARD_ID", false, "CARD__ID");
        public final static Property LOCATION_LG = new Property(12, String.class, "LOCATION_LG", false, "LOCATION__LG");
        public final static Property LOCATION_LT = new Property(13, String.class, "LOCATION_LT", false, "LOCATION__LT");
        public final static Property EXTEND = new Property(14, String.class, "EXTEND", false, "EXTEND");
    }


    public MultimediaDao(DaoConfig config) {
        super(config);
    }
    
    public MultimediaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MR_MULTIMEDIA\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"FILE__TYPE\" INTEGER NOT NULL ," + // 1: FILE_TYPE
                "\"FILE__NAME\" TEXT NOT NULL ," + // 2: FILE_NAME
                "\"FILE__HASH\" TEXT," + // 3: FILE_HASH
                "\"FILE__URL\" TEXT," + // 4: FILE_URL
                "\"UPLOAD__FLAG\" INTEGER NOT NULL ," + // 5: UPLOAD_FLAG
                "\"FILE__TIME\" INTEGER NOT NULL ," + // 6: FILE_TIME
                "\"METER__READER\" INTEGER NOT NULL ," + // 7: METER_READER
                "\"TASK__ID\" INTEGER NOT NULL ," + // 8: TASK_ID
                "\"BOOK__ID\" TEXT NOT NULL ," + // 9: BOOK_ID
                "\"RECORD__ID\" INTEGER NOT NULL ," + // 10: RECORD_ID
                "\"CARD__ID\" TEXT NOT NULL ," + // 11: CARD_ID
                "\"LOCATION__LG\" TEXT," + // 12: LOCATION_LG
                "\"LOCATION__LT\" TEXT," + // 13: LOCATION_LT
                "\"EXTEND\" TEXT);"); // 14: EXTEND
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MR_MULTIMEDIA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Multimedia entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getFILE_TYPE());
        stmt.bindString(3, entity.getFILE_NAME());
 
        String FILE_HASH = entity.getFILE_HASH();
        if (FILE_HASH != null) {
            stmt.bindString(4, FILE_HASH);
        }
 
        String FILE_URL = entity.getFILE_URL();
        if (FILE_URL != null) {
            stmt.bindString(5, FILE_URL);
        }
        stmt.bindLong(6, entity.getUPLOAD_FLAG());
        stmt.bindLong(7, entity.getFILE_TIME());
        stmt.bindLong(8, entity.getMETER_READER());
        stmt.bindLong(9, entity.getTASK_ID());
        stmt.bindString(10, entity.getBOOK_ID());
        stmt.bindLong(11, entity.getRECORD_ID());
        stmt.bindString(12, entity.getCARD_ID());
 
        String LOCATION_LG = entity.getLOCATION_LG();
        if (LOCATION_LG != null) {
            stmt.bindString(13, LOCATION_LG);
        }
 
        String LOCATION_LT = entity.getLOCATION_LT();
        if (LOCATION_LT != null) {
            stmt.bindString(14, LOCATION_LT);
        }
 
        String EXTEND = entity.getEXTEND();
        if (EXTEND != null) {
            stmt.bindString(15, EXTEND);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Multimedia entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getFILE_TYPE());
        stmt.bindString(3, entity.getFILE_NAME());
 
        String FILE_HASH = entity.getFILE_HASH();
        if (FILE_HASH != null) {
            stmt.bindString(4, FILE_HASH);
        }
 
        String FILE_URL = entity.getFILE_URL();
        if (FILE_URL != null) {
            stmt.bindString(5, FILE_URL);
        }
        stmt.bindLong(6, entity.getUPLOAD_FLAG());
        stmt.bindLong(7, entity.getFILE_TIME());
        stmt.bindLong(8, entity.getMETER_READER());
        stmt.bindLong(9, entity.getTASK_ID());
        stmt.bindString(10, entity.getBOOK_ID());
        stmt.bindLong(11, entity.getRECORD_ID());
        stmt.bindString(12, entity.getCARD_ID());
 
        String LOCATION_LG = entity.getLOCATION_LG();
        if (LOCATION_LG != null) {
            stmt.bindString(13, LOCATION_LG);
        }
 
        String LOCATION_LT = entity.getLOCATION_LT();
        if (LOCATION_LT != null) {
            stmt.bindString(14, LOCATION_LT);
        }
 
        String EXTEND = entity.getEXTEND();
        if (EXTEND != null) {
            stmt.bindString(15, EXTEND);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Multimedia readEntity(Cursor cursor, int offset) {
        Multimedia entity = new Multimedia( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getInt(offset + 1), // FILE_TYPE
            cursor.getString(offset + 2), // FILE_NAME
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // FILE_HASH
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // FILE_URL
            cursor.getInt(offset + 5), // UPLOAD_FLAG
            cursor.getLong(offset + 6), // FILE_TIME
            cursor.getInt(offset + 7), // METER_READER
            cursor.getInt(offset + 8), // TASK_ID
            cursor.getString(offset + 9), // BOOK_ID
            cursor.getInt(offset + 10), // RECORD_ID
            cursor.getString(offset + 11), // CARD_ID
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // LOCATION_LG
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // LOCATION_LT
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // EXTEND
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Multimedia entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFILE_TYPE(cursor.getInt(offset + 1));
        entity.setFILE_NAME(cursor.getString(offset + 2));
        entity.setFILE_HASH(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFILE_URL(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUPLOAD_FLAG(cursor.getInt(offset + 5));
        entity.setFILE_TIME(cursor.getLong(offset + 6));
        entity.setMETER_READER(cursor.getInt(offset + 7));
        entity.setTASK_ID(cursor.getInt(offset + 8));
        entity.setBOOK_ID(cursor.getString(offset + 9));
        entity.setRECORD_ID(cursor.getInt(offset + 10));
        entity.setCARD_ID(cursor.getString(offset + 11));
        entity.setLOCATION_LG(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLOCATION_LT(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setEXTEND(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Multimedia entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Multimedia entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Multimedia entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.sh3h.localprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sh3h.localprovider.greendaoEntity.Task;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MR_TASK".
*/
public class TaskDao extends AbstractDao<Task, Long> {

    public static final String TABLENAME = "MR_TASK";

    /**
     * Properties of entity Task.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "ID");
        public final static Property TASK_ID = new Property(1, int.class, "TASK_ID", false, "TASK__ID");
        public final static Property METER_READER = new Property(2, int.class, "METER_READER", false, "METER__READER");
        public final static Property TASK_DISPATCH_DATE = new Property(3, long.class, "TASK_DISPATCH_DATE", false, "TASK__DISPATCH__DATE");
        public final static Property BILLING_MONTH = new Property(4, int.class, "BILLING_MONTH", false, "BILLING__MONTH");
        public final static Property BOOK_ID = new Property(5, String.class, "BOOK_ID", false, "BOOK__ID");
        public final static Property BOOK_NAME = new Property(6, String.class, "BOOK_NAME", false, "BOOK__NAME");
        public final static Property METER_CYCLE = new Property(7, int.class, "METER_CYCLE", false, "METER__CYCLE");
        public final static Property READ_TIMES = new Property(8, int.class, "READ_TIMES", false, "READ__TIMES");
        public final static Property READ_DAY = new Property(9, int.class, "READ_DAY", false, "READ__DAY");
        public final static Property SUBCOM_CODE = new Property(10, String.class, "SUBCOM_CODE", false, "SUBCOM__CODE");
        public final static Property TASK_TYPE = new Property(11, int.class, "TASK_TYPE", false, "TASK__TYPE");
        public final static Property TASK_ATTRIBUTE = new Property(12, int.class, "TASK_ATTRIBUTE", false, "TASK__ATTRIBUTE");
        public final static Property READ_COUNT = new Property(13, int.class, "READ_COUNT", false, "READ__COUNT");
        public final static Property SAVE_COUNT = new Property(14, int.class, "SAVE_COUNT", false, "SAVE__COUNT");
        public final static Property CHECK_OUT_COUNT = new Property(15, int.class, "CHECK_OUT_COUNT", false, "CHECK__OUT__COUNT");
        public final static Property STATE = new Property(16, int.class, "STATE", false, "STATE");
        public final static Property DOWNLOAD_TYPE = new Property(17, int.class, "DOWNLOAD_TYPE", false, "DOWNLOAD__TYPE");
        public final static Property IS_MODIFIED = new Property(18, int.class, "IS_MODIFIED", false, "IS__MODIFIED");
        public final static Property IS_UPLPADED = new Property(19, int.class, "IS_UPLPADED", false, "IS__UPLPADED");
        public final static Property EXTEND = new Property(20, String.class, "EXTEND", false, "EXTEND");
    }


    public TaskDao(DaoConfig config) {
        super(config);
    }
    
    public TaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MR_TASK\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"TASK__ID\" INTEGER NOT NULL ," + // 1: TASK_ID
                "\"METER__READER\" INTEGER NOT NULL ," + // 2: METER_READER
                "\"TASK__DISPATCH__DATE\" INTEGER NOT NULL ," + // 3: TASK_DISPATCH_DATE
                "\"BILLING__MONTH\" INTEGER NOT NULL ," + // 4: BILLING_MONTH
                "\"BOOK__ID\" TEXT NOT NULL ," + // 5: BOOK_ID
                "\"BOOK__NAME\" TEXT NOT NULL ," + // 6: BOOK_NAME
                "\"METER__CYCLE\" INTEGER NOT NULL ," + // 7: METER_CYCLE
                "\"READ__TIMES\" INTEGER NOT NULL ," + // 8: READ_TIMES
                "\"READ__DAY\" INTEGER NOT NULL ," + // 9: READ_DAY
                "\"SUBCOM__CODE\" TEXT NOT NULL ," + // 10: SUBCOM_CODE
                "\"TASK__TYPE\" INTEGER NOT NULL ," + // 11: TASK_TYPE
                "\"TASK__ATTRIBUTE\" INTEGER NOT NULL ," + // 12: TASK_ATTRIBUTE
                "\"READ__COUNT\" INTEGER NOT NULL ," + // 13: READ_COUNT
                "\"SAVE__COUNT\" INTEGER NOT NULL ," + // 14: SAVE_COUNT
                "\"CHECK__OUT__COUNT\" INTEGER NOT NULL ," + // 15: CHECK_OUT_COUNT
                "\"STATE\" INTEGER NOT NULL ," + // 16: STATE
                "\"DOWNLOAD__TYPE\" INTEGER NOT NULL ," + // 17: DOWNLOAD_TYPE
                "\"IS__MODIFIED\" INTEGER NOT NULL ," + // 18: IS_MODIFIED
                "\"IS__UPLPADED\" INTEGER NOT NULL ," + // 19: IS_UPLPADED
                "\"EXTEND\" TEXT);"); // 20: EXTEND
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MR_TASK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Task entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getTASK_ID());
        stmt.bindLong(3, entity.getMETER_READER());
        stmt.bindLong(4, entity.getTASK_DISPATCH_DATE());
        stmt.bindLong(5, entity.getBILLING_MONTH());
        stmt.bindString(6, entity.getBOOK_ID());
        stmt.bindString(7, entity.getBOOK_NAME());
        stmt.bindLong(8, entity.getMETER_CYCLE());
        stmt.bindLong(9, entity.getREAD_TIMES());
        stmt.bindLong(10, entity.getREAD_DAY());
        stmt.bindString(11, entity.getSUBCOM_CODE());
        stmt.bindLong(12, entity.getTASK_TYPE());
        stmt.bindLong(13, entity.getTASK_ATTRIBUTE());
        stmt.bindLong(14, entity.getREAD_COUNT());
        stmt.bindLong(15, entity.getSAVE_COUNT());
        stmt.bindLong(16, entity.getCHECK_OUT_COUNT());
        stmt.bindLong(17, entity.getSTATE());
        stmt.bindLong(18, entity.getDOWNLOAD_TYPE());
        stmt.bindLong(19, entity.getIS_MODIFIED());
        stmt.bindLong(20, entity.getIS_UPLPADED());
 
        String EXTEND = entity.getEXTEND();
        if (EXTEND != null) {
            stmt.bindString(21, EXTEND);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Task entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getTASK_ID());
        stmt.bindLong(3, entity.getMETER_READER());
        stmt.bindLong(4, entity.getTASK_DISPATCH_DATE());
        stmt.bindLong(5, entity.getBILLING_MONTH());
        stmt.bindString(6, entity.getBOOK_ID());
        stmt.bindString(7, entity.getBOOK_NAME());
        stmt.bindLong(8, entity.getMETER_CYCLE());
        stmt.bindLong(9, entity.getREAD_TIMES());
        stmt.bindLong(10, entity.getREAD_DAY());
        stmt.bindString(11, entity.getSUBCOM_CODE());
        stmt.bindLong(12, entity.getTASK_TYPE());
        stmt.bindLong(13, entity.getTASK_ATTRIBUTE());
        stmt.bindLong(14, entity.getREAD_COUNT());
        stmt.bindLong(15, entity.getSAVE_COUNT());
        stmt.bindLong(16, entity.getCHECK_OUT_COUNT());
        stmt.bindLong(17, entity.getSTATE());
        stmt.bindLong(18, entity.getDOWNLOAD_TYPE());
        stmt.bindLong(19, entity.getIS_MODIFIED());
        stmt.bindLong(20, entity.getIS_UPLPADED());
 
        String EXTEND = entity.getEXTEND();
        if (EXTEND != null) {
            stmt.bindString(21, EXTEND);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Task readEntity(Cursor cursor, int offset) {
        Task entity = new Task( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getInt(offset + 1), // TASK_ID
            cursor.getInt(offset + 2), // METER_READER
            cursor.getLong(offset + 3), // TASK_DISPATCH_DATE
            cursor.getInt(offset + 4), // BILLING_MONTH
            cursor.getString(offset + 5), // BOOK_ID
            cursor.getString(offset + 6), // BOOK_NAME
            cursor.getInt(offset + 7), // METER_CYCLE
            cursor.getInt(offset + 8), // READ_TIMES
            cursor.getInt(offset + 9), // READ_DAY
            cursor.getString(offset + 10), // SUBCOM_CODE
            cursor.getInt(offset + 11), // TASK_TYPE
            cursor.getInt(offset + 12), // TASK_ATTRIBUTE
            cursor.getInt(offset + 13), // READ_COUNT
            cursor.getInt(offset + 14), // SAVE_COUNT
            cursor.getInt(offset + 15), // CHECK_OUT_COUNT
            cursor.getInt(offset + 16), // STATE
            cursor.getInt(offset + 17), // DOWNLOAD_TYPE
            cursor.getInt(offset + 18), // IS_MODIFIED
            cursor.getInt(offset + 19), // IS_UPLPADED
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // EXTEND
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Task entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTASK_ID(cursor.getInt(offset + 1));
        entity.setMETER_READER(cursor.getInt(offset + 2));
        entity.setTASK_DISPATCH_DATE(cursor.getLong(offset + 3));
        entity.setBILLING_MONTH(cursor.getInt(offset + 4));
        entity.setBOOK_ID(cursor.getString(offset + 5));
        entity.setBOOK_NAME(cursor.getString(offset + 6));
        entity.setMETER_CYCLE(cursor.getInt(offset + 7));
        entity.setREAD_TIMES(cursor.getInt(offset + 8));
        entity.setREAD_DAY(cursor.getInt(offset + 9));
        entity.setSUBCOM_CODE(cursor.getString(offset + 10));
        entity.setTASK_TYPE(cursor.getInt(offset + 11));
        entity.setTASK_ATTRIBUTE(cursor.getInt(offset + 12));
        entity.setREAD_COUNT(cursor.getInt(offset + 13));
        entity.setSAVE_COUNT(cursor.getInt(offset + 14));
        entity.setCHECK_OUT_COUNT(cursor.getInt(offset + 15));
        entity.setSTATE(cursor.getInt(offset + 16));
        entity.setDOWNLOAD_TYPE(cursor.getInt(offset + 17));
        entity.setIS_MODIFIED(cursor.getInt(offset + 18));
        entity.setIS_UPLPADED(cursor.getInt(offset + 19));
        entity.setEXTEND(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Task entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Task entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Task entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.sh3h.localprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sh3h.localprovider.greendaoEntity.Price;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MR_PRICE".
*/
public class PriceDao extends AbstractDao<Price, Long> {

    public static final String TABLENAME = "MR_PRICE";

    /**
     * Properties of entity Price.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "ID");
        public final static Property PRICE_ID = new Property(1, int.class, "PRICE_ID", false, "PRICE__ID");
        public final static Property PRICE_CODE = new Property(2, int.class, "PRICE_CODE", false, "PRICE__CODE");
        public final static Property PRICE_NAME = new Property(3, String.class, "PRICE_NAME", false, "PRICE__NAME");
        public final static Property PRICE_LIST_ID = new Property(4, int.class, "PRICE_LIST_ID", false, "PRICE__LIST__ID");
        public final static Property PRICE_CATEGORY = new Property(5, int.class, "PRICE_CATEGORY", false, "PRICE__CATEGORY");
        public final static Property REMARK = new Property(6, String.class, "REMARK", false, "REMARK");
        public final static Property PRICE_ADJUSTED = new Property(7, int.class, "PRICE_ADJUSTED", false, "PRICE__ADJUSTED");
    }


    public PriceDao(DaoConfig config) {
        super(config);
    }
    
    public PriceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MR_PRICE\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"PRICE__ID\" INTEGER NOT NULL ," + // 1: PRICE_ID
                "\"PRICE__CODE\" INTEGER NOT NULL ," + // 2: PRICE_CODE
                "\"PRICE__NAME\" TEXT NOT NULL ," + // 3: PRICE_NAME
                "\"PRICE__LIST__ID\" INTEGER NOT NULL ," + // 4: PRICE_LIST_ID
                "\"PRICE__CATEGORY\" INTEGER NOT NULL ," + // 5: PRICE_CATEGORY
                "\"REMARK\" TEXT," + // 6: REMARK
                "\"PRICE__ADJUSTED\" INTEGER NOT NULL );"); // 7: PRICE_ADJUSTED
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MR_PRICE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Price entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getPRICE_ID());
        stmt.bindLong(3, entity.getPRICE_CODE());
        stmt.bindString(4, entity.getPRICE_NAME());
        stmt.bindLong(5, entity.getPRICE_LIST_ID());
        stmt.bindLong(6, entity.getPRICE_CATEGORY());
 
        String REMARK = entity.getREMARK();
        if (REMARK != null) {
            stmt.bindString(7, REMARK);
        }
        stmt.bindLong(8, entity.getPRICE_ADJUSTED());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Price entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getPRICE_ID());
        stmt.bindLong(3, entity.getPRICE_CODE());
        stmt.bindString(4, entity.getPRICE_NAME());
        stmt.bindLong(5, entity.getPRICE_LIST_ID());
        stmt.bindLong(6, entity.getPRICE_CATEGORY());
 
        String REMARK = entity.getREMARK();
        if (REMARK != null) {
            stmt.bindString(7, REMARK);
        }
        stmt.bindLong(8, entity.getPRICE_ADJUSTED());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Price readEntity(Cursor cursor, int offset) {
        Price entity = new Price( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getInt(offset + 1), // PRICE_ID
            cursor.getInt(offset + 2), // PRICE_CODE
            cursor.getString(offset + 3), // PRICE_NAME
            cursor.getInt(offset + 4), // PRICE_LIST_ID
            cursor.getInt(offset + 5), // PRICE_CATEGORY
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // REMARK
            cursor.getInt(offset + 7) // PRICE_ADJUSTED
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Price entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPRICE_ID(cursor.getInt(offset + 1));
        entity.setPRICE_CODE(cursor.getInt(offset + 2));
        entity.setPRICE_NAME(cursor.getString(offset + 3));
        entity.setPRICE_LIST_ID(cursor.getInt(offset + 4));
        entity.setPRICE_CATEGORY(cursor.getInt(offset + 5));
        entity.setREMARK(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPRICE_ADJUSTED(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Price entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Price entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Price entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

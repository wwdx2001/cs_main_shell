package com.sh3h.localprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sh3h.localprovider.greendaoEntity.ReadState;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MR_READSTATE".
*/
public class ReadStateDao extends AbstractDao<ReadState, Long> {

    public static final String TABLENAME = "MR_READSTATE";

    /**
     * Properties of entity ReadState.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property STATE_ID = new Property(0, Long.class, "STATE_ID", true, "_id");
        public final static Property STATE_CODE = new Property(1, String.class, "STATE_CODE", false, "STATE__CODE");
        public final static Property STATE_NAME = new Property(2, String.class, "STATE_NAME", false, "STATE__NAME");
        public final static Property STATE_TYPE = new Property(3, int.class, "STATE_TYPE", false, "STATE__TYPE");
        public final static Property STATE_PARENT_ID = new Property(4, String.class, "STATE_PARENT_ID", false, "STATE__PARENT__ID");
        public final static Property ALGORITHM_CODE = new Property(5, String.class, "ALGORITHM_CODE", false, "ALGORITHM__CODE");
    }


    public ReadStateDao(DaoConfig config) {
        super(config);
    }
    
    public ReadStateDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MR_READSTATE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: STATE_ID
                "\"STATE__CODE\" TEXT NOT NULL ," + // 1: STATE_CODE
                "\"STATE__NAME\" TEXT NOT NULL ," + // 2: STATE_NAME
                "\"STATE__TYPE\" INTEGER NOT NULL ," + // 3: STATE_TYPE
                "\"STATE__PARENT__ID\" TEXT NOT NULL ," + // 4: STATE_PARENT_ID
                "\"ALGORITHM__CODE\" TEXT NOT NULL );"); // 5: ALGORITHM_CODE
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MR_READSTATE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ReadState entity) {
        stmt.clearBindings();
 
        Long STATE_ID = entity.getSTATE_ID();
        if (STATE_ID != null) {
            stmt.bindLong(1, STATE_ID);
        }
        stmt.bindString(2, entity.getSTATE_CODE());
        stmt.bindString(3, entity.getSTATE_NAME());
        stmt.bindLong(4, entity.getSTATE_TYPE());
        stmt.bindString(5, entity.getSTATE_PARENT_ID());
        stmt.bindString(6, entity.getALGORITHM_CODE());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ReadState entity) {
        stmt.clearBindings();
 
        Long STATE_ID = entity.getSTATE_ID();
        if (STATE_ID != null) {
            stmt.bindLong(1, STATE_ID);
        }
        stmt.bindString(2, entity.getSTATE_CODE());
        stmt.bindString(3, entity.getSTATE_NAME());
        stmt.bindLong(4, entity.getSTATE_TYPE());
        stmt.bindString(5, entity.getSTATE_PARENT_ID());
        stmt.bindString(6, entity.getALGORITHM_CODE());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ReadState readEntity(Cursor cursor, int offset) {
        ReadState entity = new ReadState( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // STATE_ID
            cursor.getString(offset + 1), // STATE_CODE
            cursor.getString(offset + 2), // STATE_NAME
            cursor.getInt(offset + 3), // STATE_TYPE
            cursor.getString(offset + 4), // STATE_PARENT_ID
            cursor.getString(offset + 5) // ALGORITHM_CODE
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ReadState entity, int offset) {
        entity.setSTATE_ID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSTATE_CODE(cursor.getString(offset + 1));
        entity.setSTATE_NAME(cursor.getString(offset + 2));
        entity.setSTATE_TYPE(cursor.getInt(offset + 3));
        entity.setSTATE_PARENT_ID(cursor.getString(offset + 4));
        entity.setALGORITHM_CODE(cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ReadState entity, long rowId) {
        entity.setSTATE_ID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ReadState entity) {
        if(entity != null) {
            return entity.getSTATE_ID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ReadState entity) {
        return entity.getSTATE_ID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

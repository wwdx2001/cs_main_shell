package com.sh3h.localprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sh3h.localprovider.greendaoEntity.PriceDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MR_PRICEDETAIL".
*/
public class PriceDetailDao extends AbstractDao<PriceDetail, Long> {

    public static final String TABLENAME = "MR_PRICEDETAIL";

    /**
     * Properties of entity PriceDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "ID");
        public final static Property PRICE_LIST_ID = new Property(1, int.class, "PRICE_LIST_ID", false, "PRICE__LIST__ID");
        public final static Property PRICE_CODE = new Property(2, int.class, "PRICE_CODE", false, "PRICE__CODE");
        public final static Property PILD = new Property(3, int.class, "PILD", false, "PILD");
        public final static Property LEVEL_TYPE = new Property(4, int.class, "LEVEL_TYPE", false, "LEVEL__TYPE");
        public final static Property LEVEL_INDEX = new Property(5, int.class, "LEVEL_INDEX", false, "LEVEL__INDEX");
        public final static Property START_WATE = new Property(6, int.class, "START_WATE", false, "START__WATE");
        public final static Property END_WATER = new Property(7, int.class, "END_WATER", false, "END__WATER");
        public final static Property PRICE = new Property(8, double.class, "PRICE", false, "PRICE");
        public final static Property CACULATE_MODE = new Property(9, int.class, "CACULATE_MODE", false, "CACULATE__MODE");
        public final static Property WATER_NUMBER = new Property(10, double.class, "WATER_NUMBER", false, "WATER__NUMBER");
        public final static Property REMARK = new Property(11, String.class, "REMARK", false, "REMARK");
    }


    public PriceDetailDao(DaoConfig config) {
        super(config);
    }
    
    public PriceDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MR_PRICEDETAIL\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"PRICE__LIST__ID\" INTEGER NOT NULL ," + // 1: PRICE_LIST_ID
                "\"PRICE__CODE\" INTEGER NOT NULL ," + // 2: PRICE_CODE
                "\"PILD\" INTEGER NOT NULL ," + // 3: PILD
                "\"LEVEL__TYPE\" INTEGER NOT NULL ," + // 4: LEVEL_TYPE
                "\"LEVEL__INDEX\" INTEGER NOT NULL ," + // 5: LEVEL_INDEX
                "\"START__WATE\" INTEGER NOT NULL ," + // 6: START_WATE
                "\"END__WATER\" INTEGER NOT NULL ," + // 7: END_WATER
                "\"PRICE\" REAL NOT NULL ," + // 8: PRICE
                "\"CACULATE__MODE\" INTEGER NOT NULL ," + // 9: CACULATE_MODE
                "\"WATER__NUMBER\" REAL NOT NULL ," + // 10: WATER_NUMBER
                "\"REMARK\" TEXT);"); // 11: REMARK
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MR_PRICEDETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PriceDetail entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getPRICE_LIST_ID());
        stmt.bindLong(3, entity.getPRICE_CODE());
        stmt.bindLong(4, entity.getPILD());
        stmt.bindLong(5, entity.getLEVEL_TYPE());
        stmt.bindLong(6, entity.getLEVEL_INDEX());
        stmt.bindLong(7, entity.getSTART_WATE());
        stmt.bindLong(8, entity.getEND_WATER());
        stmt.bindDouble(9, entity.getPRICE());
        stmt.bindLong(10, entity.getCACULATE_MODE());
        stmt.bindDouble(11, entity.getWATER_NUMBER());
 
        String REMARK = entity.getREMARK();
        if (REMARK != null) {
            stmt.bindString(12, REMARK);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PriceDetail entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getPRICE_LIST_ID());
        stmt.bindLong(3, entity.getPRICE_CODE());
        stmt.bindLong(4, entity.getPILD());
        stmt.bindLong(5, entity.getLEVEL_TYPE());
        stmt.bindLong(6, entity.getLEVEL_INDEX());
        stmt.bindLong(7, entity.getSTART_WATE());
        stmt.bindLong(8, entity.getEND_WATER());
        stmt.bindDouble(9, entity.getPRICE());
        stmt.bindLong(10, entity.getCACULATE_MODE());
        stmt.bindDouble(11, entity.getWATER_NUMBER());
 
        String REMARK = entity.getREMARK();
        if (REMARK != null) {
            stmt.bindString(12, REMARK);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PriceDetail readEntity(Cursor cursor, int offset) {
        PriceDetail entity = new PriceDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getInt(offset + 1), // PRICE_LIST_ID
            cursor.getInt(offset + 2), // PRICE_CODE
            cursor.getInt(offset + 3), // PILD
            cursor.getInt(offset + 4), // LEVEL_TYPE
            cursor.getInt(offset + 5), // LEVEL_INDEX
            cursor.getInt(offset + 6), // START_WATE
            cursor.getInt(offset + 7), // END_WATER
            cursor.getDouble(offset + 8), // PRICE
            cursor.getInt(offset + 9), // CACULATE_MODE
            cursor.getDouble(offset + 10), // WATER_NUMBER
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // REMARK
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PriceDetail entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPRICE_LIST_ID(cursor.getInt(offset + 1));
        entity.setPRICE_CODE(cursor.getInt(offset + 2));
        entity.setPILD(cursor.getInt(offset + 3));
        entity.setLEVEL_TYPE(cursor.getInt(offset + 4));
        entity.setLEVEL_INDEX(cursor.getInt(offset + 5));
        entity.setSTART_WATE(cursor.getInt(offset + 6));
        entity.setEND_WATER(cursor.getInt(offset + 7));
        entity.setPRICE(cursor.getDouble(offset + 8));
        entity.setCACULATE_MODE(cursor.getInt(offset + 9));
        entity.setWATER_NUMBER(cursor.getDouble(offset + 10));
        entity.setREMARK(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PriceDetail entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PriceDetail entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PriceDetail entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

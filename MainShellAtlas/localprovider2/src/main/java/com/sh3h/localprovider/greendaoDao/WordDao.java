package com.sh3h.localprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sh3h.localprovider.greendaoEntity.Word;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MR_WORD".
*/
public class WordDao extends AbstractDao<Word, Long> {

    public static final String TABLENAME = "MR_WORD";

    /**
     * Properties of entity Word.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "ID");
        public final static Property WORD_ID = new Property(1, int.class, "WORD_ID", false, "WORD__ID");
        public final static Property WORD_PARENT_ID = new Property(2, int.class, "WORD_PARENT_ID", false, "WORD__PARENT__ID");
        public final static Property WORD_GROUP_KEY = new Property(3, String.class, "WORD_GROUP_KEY", false, "WORD__GROUP__KEY");
        public final static Property WORD_KEY = new Property(4, String.class, "WORD_KEY", false, "WORD__KEY");
        public final static Property WORD_TEXT = new Property(5, String.class, "WORD_TEXT", false, "WORD__TEXT");
        public final static Property WORD_VALUE = new Property(6, String.class, "WORD_VALUE", false, "WORD__VALUE");
        public final static Property WORD_REMARK = new Property(7, String.class, "WORD_REMARK", false, "WORD__REMARK");
    }


    public WordDao(DaoConfig config) {
        super(config);
    }
    
    public WordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MR_WORD\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"WORD__ID\" INTEGER NOT NULL ," + // 1: WORD_ID
                "\"WORD__PARENT__ID\" INTEGER NOT NULL ," + // 2: WORD_PARENT_ID
                "\"WORD__GROUP__KEY\" TEXT NOT NULL ," + // 3: WORD_GROUP_KEY
                "\"WORD__KEY\" TEXT NOT NULL ," + // 4: WORD_KEY
                "\"WORD__TEXT\" TEXT NOT NULL ," + // 5: WORD_TEXT
                "\"WORD__VALUE\" TEXT NOT NULL ," + // 6: WORD_VALUE
                "\"WORD__REMARK\" TEXT);"); // 7: WORD_REMARK
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MR_WORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Word entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getWORD_ID());
        stmt.bindLong(3, entity.getWORD_PARENT_ID());
        stmt.bindString(4, entity.getWORD_GROUP_KEY());
        stmt.bindString(5, entity.getWORD_KEY());
        stmt.bindString(6, entity.getWORD_TEXT());
        stmt.bindString(7, entity.getWORD_VALUE());
 
        String WORD_REMARK = entity.getWORD_REMARK();
        if (WORD_REMARK != null) {
            stmt.bindString(8, WORD_REMARK);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Word entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getWORD_ID());
        stmt.bindLong(3, entity.getWORD_PARENT_ID());
        stmt.bindString(4, entity.getWORD_GROUP_KEY());
        stmt.bindString(5, entity.getWORD_KEY());
        stmt.bindString(6, entity.getWORD_TEXT());
        stmt.bindString(7, entity.getWORD_VALUE());
 
        String WORD_REMARK = entity.getWORD_REMARK();
        if (WORD_REMARK != null) {
            stmt.bindString(8, WORD_REMARK);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Word readEntity(Cursor cursor, int offset) {
        Word entity = new Word( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getInt(offset + 1), // WORD_ID
            cursor.getInt(offset + 2), // WORD_PARENT_ID
            cursor.getString(offset + 3), // WORD_GROUP_KEY
            cursor.getString(offset + 4), // WORD_KEY
            cursor.getString(offset + 5), // WORD_TEXT
            cursor.getString(offset + 6), // WORD_VALUE
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // WORD_REMARK
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Word entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWORD_ID(cursor.getInt(offset + 1));
        entity.setWORD_PARENT_ID(cursor.getInt(offset + 2));
        entity.setWORD_GROUP_KEY(cursor.getString(offset + 3));
        entity.setWORD_KEY(cursor.getString(offset + 4));
        entity.setWORD_TEXT(cursor.getString(offset + 5));
        entity.setWORD_VALUE(cursor.getString(offset + 6));
        entity.setWORD_REMARK(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Word entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Word entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Word entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

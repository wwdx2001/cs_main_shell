package com.sh3h.localprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sh3h.localprovider.greendaoEntity.Charge;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MR_CHARGE".
*/
public class ChargeDao extends AbstractDao<Charge, Long> {

    public static final String TABLENAME = "MR_CHARGE";

    /**
     * Properties of entity Charge.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "ID");
        public final static Property FEE_ID = new Property(1, int.class, "FEE_ID", false, "FEE__ID");
        public final static Property CARD_ID = new Property(2, String.class, "CARD_ID", false, "CARD__ID");
        public final static Property CARD_NAME = new Property(3, String.class, "CARD_NAME", false, "CARD__NAME");
        public final static Property CARD_ADDRESS = new Property(4, String.class, "CARD_ADDRESS", false, "CARD__ADDRESS");
        public final static Property MAIN_CARD_ID = new Property(5, String.class, "MAIN_CARD_ID", false, "MAIN__CARD__ID");
        public final static Property CUSTOMER_ID = new Property(6, String.class, "CUSTOMER_ID", false, "CUSTOMER__ID");
        public final static Property CUSTOMER_TYPE = new Property(7, int.class, "CUSTOMER_TYPE", false, "CUSTOMER__TYPE");
        public final static Property SUBCOM_CODE = new Property(8, String.class, "SUBCOM_CODE", false, "SUBCOM__CODE");
        public final static Property BOOK_ID = new Property(9, String.class, "BOOK_ID", false, "BOOK__ID");
        public final static Property BOOK_SORT_INDEX = new Property(10, int.class, "BOOK_SORT_INDEX", false, "BOOK__SORT__INDEX");
        public final static Property PAY_METHOD = new Property(11, int.class, "PAY_METHOD", false, "PAY__METHOD");
        public final static Property PRICE_LIST_ID = new Property(12, int.class, "PRICE_LIST_ID", false, "PRICE__LIST__ID");
        public final static Property PRICE_CODE = new Property(13, int.class, "PRICE_CODE", false, "PRICE__CODE");
        public final static Property PRODUCER_ID = new Property(14, int.class, "PRODUCER_ID", false, "PRODUCER__ID");
        public final static Property MODELLD = new Property(15, int.class, "MODELLD", false, "MODELLD");
        public final static Property CALIBER_ID = new Property(16, int.class, "CALIBER_ID", false, "CALIBER__ID");
        public final static Property CALIBER_RANGE_ID = new Property(17, int.class, "CALIBER_RANGE_ID", false, "CALIBER__RANGE__ID");
        public final static Property BILLING_MONTH = new Property(18, int.class, "BILLING_MONTH", false, "BILLING__MONTH");
        public final static Property READ_YEAR = new Property(19, int.class, "READ_YEAR", false, "READ__YEAR");
        public final static Property READ_MONTH = new Property(20, int.class, "READ_MONTH", false, "READ__MONTH");
        public final static Property READ_TIMES = new Property(21, int.class, "READ_TIMES", false, "READ__TIMES");
        public final static Property LAST_READ_WATER = new Property(22, int.class, "LAST_READ_WATER", false, "LAST__READ__WATER");
        public final static Property LAST_READING = new Property(23, int.class, "LAST_READING", false, "LAST__READING");
        public final static Property LAST_READ_STATE = new Property(24, int.class, "LAST_READ_STATE", false, "LAST__READ__STATE");
        public final static Property LAST_READ_DATE = new Property(25, long.class, "LAST_READ_DATE", false, "LAST__READ__DATE");
        public final static Property READING = new Property(26, int.class, "READING", false, "READING");
        public final static Property READ_STATE = new Property(27, int.class, "READ_STATE", false, "READ__STATE");
        public final static Property READ_STATE_CN = new Property(28, String.class, "READ_STATE_CN", false, "READ__STATE__CN");
        public final static Property READ_DATE = new Property(29, long.class, "READ_DATE", false, "READ__DATE");
        public final static Property METER_READER = new Property(30, int.class, "METER_READER", false, "METER__READER");
        public final static Property RECORD_ENTRY_USER = new Property(31, int.class, "RECORD_ENTRY_USER", false, "RECORD__ENTRY__USER");
        public final static Property NEXT_READ_DATE = new Property(32, int.class, "NEXT_READ_DATE", false, "NEXT__READ__DATE");
        public final static Property ACC_WATER = new Property(33, int.class, "ACC_WATER", false, "ACC__WATER");
        public final static Property LAST_BALANCE = new Property(34, double.class, "LAST_BALANCE", false, "LAST__BALANCE");
        public final static Property BALANCE = new Property(35, double.class, "BALANCE", false, "BALANCE");
        public final static Property ACC_MONEY = new Property(36, double.class, "ACC_MONEY", false, "ACC__MONEY");
        public final static Property ACC_CHECK_MONEY = new Property(37, double.class, "ACC_CHECK_MONEY", false, "ACC__CHECK__MONEY");
        public final static Property CHECK_TIME = new Property(38, long.class, "CHECK_TIME", false, "CHECK__TIME");
        public final static Property CHECK_DATE = new Property(39, int.class, "CHECK_DATE", false, "CHECK__DATE");
        public final static Property CHECK_USER = new Property(40, int.class, "CHECK_USER", false, "CHECK__USER");
        public final static Property PI_1MONEY = new Property(41, double.class, "PI_1MONEY", false, "PI_1_MONEY");
        public final static Property PI_2MONEY = new Property(42, double.class, "PI_2MONEY", false, "PI_2_MONEY");
        public final static Property PI_3MONEY = new Property(43, double.class, "PI_3MONEY", false, "PI_3_MONEY");
        public final static Property PI_4MONEY = new Property(44, double.class, "PI_4MONEY", false, "PI_4_MONEY");
        public final static Property PI_5MONEY = new Property(45, double.class, "PI_5MONEY", false, "PI_5_MONEY");
        public final static Property PI_6MONEY = new Property(46, double.class, "PI_6MONEY", false, "PI_6_MONEY");
        public final static Property CHARGE_LIMIT_DATE = new Property(47, long.class, "CHARGE_LIMIT_DATE", false, "CHARGE__LIMIT__DATE");
        public final static Property DUELATE_FEE = new Property(48, double.class, "DUELATE_FEE", false, "DUELATE__FEE");
        public final static Property DELATE_FEE = new Property(49, double.class, "DELATE_FEE", false, "DELATE__FEE");
        public final static Property ACTUALLY_LATE_FEE = new Property(50, double.class, "ACTUALLY_LATE_FEE", false, "ACTUALLY__LATE__FEE");
        public final static Property PAY_TIME = new Property(51, long.class, "PAY_TIME", false, "PAY__TIME");
        public final static Property PAY_DATE = new Property(52, int.class, "PAY_DATE", false, "PAY__DATE");
        public final static Property CASHIER = new Property(53, int.class, "CASHIER", false, "CASHIER");
        public final static Property PWID = new Property(54, int.class, "PWID", false, "PWID");
        public final static Property PST_METHOD = new Property(55, int.class, "PST_METHOD", false, "PST__METHOD");
        public final static Property PAY_STATE = new Property(56, int.class, "PAY_STATE", false, "PAY__STATE");
        public final static Property PSUB_TOTALLD = new Property(57, int.class, "PSUB_TOTALLD", false, "PSUB__TOTALLD");
        public final static Property P_TOTALLD = new Property(58, int.class, "P_TOTALLD", false, "P__TOTALLD");
        public final static Property CHARGE_TIME = new Property(59, long.class, "CHARGE_TIME", false, "CHARGE__TIME");
        public final static Property PRINT_TIMES = new Property(60, int.class, "PRINT_TIMES", false, "PRINT__TIMES");
        public final static Property PRINT_DATE = new Property(61, long.class, "PRINT_DATE", false, "PRINT__DATE");
        public final static Property INVOICE_CODE = new Property(62, String.class, "INVOICE_CODE", false, "INVOICE__CODE");
        public final static Property INVOICE_YEAR = new Property(63, int.class, "INVOICE_YEAR", false, "INVOICE__YEAR");
        public final static Property INVOICE_NUMBER = new Property(64, String.class, "INVOICE_NUMBER", false, "INVOICE__NUMBER");
        public final static Property BANK_BATCH_FLAG = new Property(65, int.class, "BANK_BATCH_FLAG", false, "BANK__BATCH__FLAG");
        public final static Property BANK_BATCH_ID = new Property(66, int.class, "BANK_BATCH_ID", false, "BANK__BATCH__ID");
        public final static Property BANK_SEND_TIME = new Property(67, long.class, "BANK_SEND_TIME", false, "BANK__SEND__TIME");
        public final static Property LAST_FEE_ID = new Property(68, int.class, "LAST_FEE_ID", false, "LAST__FEE__ID");
        public final static Property ORIGINAL_FEE_ID = new Property(69, int.class, "ORIGINAL_FEE_ID", false, "ORIGINAL__FEE__ID");
        public final static Property ADJUST_ID = new Property(70, int.class, "ADJUST_ID", false, "ADJUST__ID");
        public final static Property ADJUST_TYPE = new Property(71, int.class, "ADJUST_TYPE", false, "ADJUST__TYPE");
        public final static Property FEE_STATE = new Property(72, int.class, "FEE_STATE", false, "FEE__STATE");
        public final static Property PROCESS_STATE = new Property(73, int.class, "PROCESS_STATE", false, "PROCESS__STATE");
        public final static Property IS_VAT_USER = new Property(74, boolean.class, "IS_VAT_USER", false, "IS__VAT__USER");
        public final static Property PERSON_COUNT = new Property(75, int.class, "PERSON_COUNT", false, "PERSON__COUNT");
    }


    public ChargeDao(DaoConfig config) {
        super(config);
    }
    
    public ChargeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MR_CHARGE\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"FEE__ID\" INTEGER NOT NULL ," + // 1: FEE_ID
                "\"CARD__ID\" TEXT NOT NULL ," + // 2: CARD_ID
                "\"CARD__NAME\" TEXT NOT NULL ," + // 3: CARD_NAME
                "\"CARD__ADDRESS\" TEXT NOT NULL ," + // 4: CARD_ADDRESS
                "\"MAIN__CARD__ID\" TEXT NOT NULL ," + // 5: MAIN_CARD_ID
                "\"CUSTOMER__ID\" TEXT NOT NULL ," + // 6: CUSTOMER_ID
                "\"CUSTOMER__TYPE\" INTEGER NOT NULL ," + // 7: CUSTOMER_TYPE
                "\"SUBCOM__CODE\" TEXT NOT NULL ," + // 8: SUBCOM_CODE
                "\"BOOK__ID\" TEXT NOT NULL ," + // 9: BOOK_ID
                "\"BOOK__SORT__INDEX\" INTEGER NOT NULL ," + // 10: BOOK_SORT_INDEX
                "\"PAY__METHOD\" INTEGER NOT NULL ," + // 11: PAY_METHOD
                "\"PRICE__LIST__ID\" INTEGER NOT NULL ," + // 12: PRICE_LIST_ID
                "\"PRICE__CODE\" INTEGER NOT NULL ," + // 13: PRICE_CODE
                "\"PRODUCER__ID\" INTEGER NOT NULL ," + // 14: PRODUCER_ID
                "\"MODELLD\" INTEGER NOT NULL ," + // 15: MODELLD
                "\"CALIBER__ID\" INTEGER NOT NULL ," + // 16: CALIBER_ID
                "\"CALIBER__RANGE__ID\" INTEGER NOT NULL ," + // 17: CALIBER_RANGE_ID
                "\"BILLING__MONTH\" INTEGER NOT NULL ," + // 18: BILLING_MONTH
                "\"READ__YEAR\" INTEGER NOT NULL ," + // 19: READ_YEAR
                "\"READ__MONTH\" INTEGER NOT NULL ," + // 20: READ_MONTH
                "\"READ__TIMES\" INTEGER NOT NULL ," + // 21: READ_TIMES
                "\"LAST__READ__WATER\" INTEGER NOT NULL ," + // 22: LAST_READ_WATER
                "\"LAST__READING\" INTEGER NOT NULL ," + // 23: LAST_READING
                "\"LAST__READ__STATE\" INTEGER NOT NULL ," + // 24: LAST_READ_STATE
                "\"LAST__READ__DATE\" INTEGER NOT NULL ," + // 25: LAST_READ_DATE
                "\"READING\" INTEGER NOT NULL ," + // 26: READING
                "\"READ__STATE\" INTEGER NOT NULL ," + // 27: READ_STATE
                "\"READ__STATE__CN\" TEXT NOT NULL ," + // 28: READ_STATE_CN
                "\"READ__DATE\" INTEGER NOT NULL ," + // 29: READ_DATE
                "\"METER__READER\" INTEGER NOT NULL ," + // 30: METER_READER
                "\"RECORD__ENTRY__USER\" INTEGER NOT NULL ," + // 31: RECORD_ENTRY_USER
                "\"NEXT__READ__DATE\" INTEGER NOT NULL ," + // 32: NEXT_READ_DATE
                "\"ACC__WATER\" INTEGER NOT NULL ," + // 33: ACC_WATER
                "\"LAST__BALANCE\" REAL NOT NULL ," + // 34: LAST_BALANCE
                "\"BALANCE\" REAL NOT NULL ," + // 35: BALANCE
                "\"ACC__MONEY\" REAL NOT NULL ," + // 36: ACC_MONEY
                "\"ACC__CHECK__MONEY\" REAL NOT NULL ," + // 37: ACC_CHECK_MONEY
                "\"CHECK__TIME\" INTEGER NOT NULL ," + // 38: CHECK_TIME
                "\"CHECK__DATE\" INTEGER NOT NULL ," + // 39: CHECK_DATE
                "\"CHECK__USER\" INTEGER NOT NULL ," + // 40: CHECK_USER
                "\"PI_1_MONEY\" REAL NOT NULL ," + // 41: PI_1MONEY
                "\"PI_2_MONEY\" REAL NOT NULL ," + // 42: PI_2MONEY
                "\"PI_3_MONEY\" REAL NOT NULL ," + // 43: PI_3MONEY
                "\"PI_4_MONEY\" REAL NOT NULL ," + // 44: PI_4MONEY
                "\"PI_5_MONEY\" REAL NOT NULL ," + // 45: PI_5MONEY
                "\"PI_6_MONEY\" REAL NOT NULL ," + // 46: PI_6MONEY
                "\"CHARGE__LIMIT__DATE\" INTEGER NOT NULL ," + // 47: CHARGE_LIMIT_DATE
                "\"DUELATE__FEE\" REAL NOT NULL ," + // 48: DUELATE_FEE
                "\"DELATE__FEE\" REAL NOT NULL ," + // 49: DELATE_FEE
                "\"ACTUALLY__LATE__FEE\" REAL NOT NULL ," + // 50: ACTUALLY_LATE_FEE
                "\"PAY__TIME\" INTEGER NOT NULL ," + // 51: PAY_TIME
                "\"PAY__DATE\" INTEGER NOT NULL ," + // 52: PAY_DATE
                "\"CASHIER\" INTEGER NOT NULL ," + // 53: CASHIER
                "\"PWID\" INTEGER NOT NULL ," + // 54: PWID
                "\"PST__METHOD\" INTEGER NOT NULL ," + // 55: PST_METHOD
                "\"PAY__STATE\" INTEGER NOT NULL ," + // 56: PAY_STATE
                "\"PSUB__TOTALLD\" INTEGER NOT NULL ," + // 57: PSUB_TOTALLD
                "\"P__TOTALLD\" INTEGER NOT NULL ," + // 58: P_TOTALLD
                "\"CHARGE__TIME\" INTEGER NOT NULL ," + // 59: CHARGE_TIME
                "\"PRINT__TIMES\" INTEGER NOT NULL ," + // 60: PRINT_TIMES
                "\"PRINT__DATE\" INTEGER NOT NULL ," + // 61: PRINT_DATE
                "\"INVOICE__CODE\" TEXT NOT NULL ," + // 62: INVOICE_CODE
                "\"INVOICE__YEAR\" INTEGER NOT NULL ," + // 63: INVOICE_YEAR
                "\"INVOICE__NUMBER\" TEXT NOT NULL ," + // 64: INVOICE_NUMBER
                "\"BANK__BATCH__FLAG\" INTEGER NOT NULL ," + // 65: BANK_BATCH_FLAG
                "\"BANK__BATCH__ID\" INTEGER NOT NULL ," + // 66: BANK_BATCH_ID
                "\"BANK__SEND__TIME\" INTEGER NOT NULL ," + // 67: BANK_SEND_TIME
                "\"LAST__FEE__ID\" INTEGER NOT NULL ," + // 68: LAST_FEE_ID
                "\"ORIGINAL__FEE__ID\" INTEGER NOT NULL ," + // 69: ORIGINAL_FEE_ID
                "\"ADJUST__ID\" INTEGER NOT NULL ," + // 70: ADJUST_ID
                "\"ADJUST__TYPE\" INTEGER NOT NULL ," + // 71: ADJUST_TYPE
                "\"FEE__STATE\" INTEGER NOT NULL ," + // 72: FEE_STATE
                "\"PROCESS__STATE\" INTEGER NOT NULL ," + // 73: PROCESS_STATE
                "\"IS__VAT__USER\" INTEGER NOT NULL ," + // 74: IS_VAT_USER
                "\"PERSON__COUNT\" INTEGER NOT NULL );"); // 75: PERSON_COUNT
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MR_CHARGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Charge entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getFEE_ID());
        stmt.bindString(3, entity.getCARD_ID());
        stmt.bindString(4, entity.getCARD_NAME());
        stmt.bindString(5, entity.getCARD_ADDRESS());
        stmt.bindString(6, entity.getMAIN_CARD_ID());
        stmt.bindString(7, entity.getCUSTOMER_ID());
        stmt.bindLong(8, entity.getCUSTOMER_TYPE());
        stmt.bindString(9, entity.getSUBCOM_CODE());
        stmt.bindString(10, entity.getBOOK_ID());
        stmt.bindLong(11, entity.getBOOK_SORT_INDEX());
        stmt.bindLong(12, entity.getPAY_METHOD());
        stmt.bindLong(13, entity.getPRICE_LIST_ID());
        stmt.bindLong(14, entity.getPRICE_CODE());
        stmt.bindLong(15, entity.getPRODUCER_ID());
        stmt.bindLong(16, entity.getMODELLD());
        stmt.bindLong(17, entity.getCALIBER_ID());
        stmt.bindLong(18, entity.getCALIBER_RANGE_ID());
        stmt.bindLong(19, entity.getBILLING_MONTH());
        stmt.bindLong(20, entity.getREAD_YEAR());
        stmt.bindLong(21, entity.getREAD_MONTH());
        stmt.bindLong(22, entity.getREAD_TIMES());
        stmt.bindLong(23, entity.getLAST_READ_WATER());
        stmt.bindLong(24, entity.getLAST_READING());
        stmt.bindLong(25, entity.getLAST_READ_STATE());
        stmt.bindLong(26, entity.getLAST_READ_DATE());
        stmt.bindLong(27, entity.getREADING());
        stmt.bindLong(28, entity.getREAD_STATE());
        stmt.bindString(29, entity.getREAD_STATE_CN());
        stmt.bindLong(30, entity.getREAD_DATE());
        stmt.bindLong(31, entity.getMETER_READER());
        stmt.bindLong(32, entity.getRECORD_ENTRY_USER());
        stmt.bindLong(33, entity.getNEXT_READ_DATE());
        stmt.bindLong(34, entity.getACC_WATER());
        stmt.bindDouble(35, entity.getLAST_BALANCE());
        stmt.bindDouble(36, entity.getBALANCE());
        stmt.bindDouble(37, entity.getACC_MONEY());
        stmt.bindDouble(38, entity.getACC_CHECK_MONEY());
        stmt.bindLong(39, entity.getCHECK_TIME());
        stmt.bindLong(40, entity.getCHECK_DATE());
        stmt.bindLong(41, entity.getCHECK_USER());
        stmt.bindDouble(42, entity.getPI_1MONEY());
        stmt.bindDouble(43, entity.getPI_2MONEY());
        stmt.bindDouble(44, entity.getPI_3MONEY());
        stmt.bindDouble(45, entity.getPI_4MONEY());
        stmt.bindDouble(46, entity.getPI_5MONEY());
        stmt.bindDouble(47, entity.getPI_6MONEY());
        stmt.bindLong(48, entity.getCHARGE_LIMIT_DATE());
        stmt.bindDouble(49, entity.getDUELATE_FEE());
        stmt.bindDouble(50, entity.getDELATE_FEE());
        stmt.bindDouble(51, entity.getACTUALLY_LATE_FEE());
        stmt.bindLong(52, entity.getPAY_TIME());
        stmt.bindLong(53, entity.getPAY_DATE());
        stmt.bindLong(54, entity.getCASHIER());
        stmt.bindLong(55, entity.getPWID());
        stmt.bindLong(56, entity.getPST_METHOD());
        stmt.bindLong(57, entity.getPAY_STATE());
        stmt.bindLong(58, entity.getPSUB_TOTALLD());
        stmt.bindLong(59, entity.getP_TOTALLD());
        stmt.bindLong(60, entity.getCHARGE_TIME());
        stmt.bindLong(61, entity.getPRINT_TIMES());
        stmt.bindLong(62, entity.getPRINT_DATE());
        stmt.bindString(63, entity.getINVOICE_CODE());
        stmt.bindLong(64, entity.getINVOICE_YEAR());
        stmt.bindString(65, entity.getINVOICE_NUMBER());
        stmt.bindLong(66, entity.getBANK_BATCH_FLAG());
        stmt.bindLong(67, entity.getBANK_BATCH_ID());
        stmt.bindLong(68, entity.getBANK_SEND_TIME());
        stmt.bindLong(69, entity.getLAST_FEE_ID());
        stmt.bindLong(70, entity.getORIGINAL_FEE_ID());
        stmt.bindLong(71, entity.getADJUST_ID());
        stmt.bindLong(72, entity.getADJUST_TYPE());
        stmt.bindLong(73, entity.getFEE_STATE());
        stmt.bindLong(74, entity.getPROCESS_STATE());
        stmt.bindLong(75, entity.getIS_VAT_USER() ? 1L: 0L);
        stmt.bindLong(76, entity.getPERSON_COUNT());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Charge entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getFEE_ID());
        stmt.bindString(3, entity.getCARD_ID());
        stmt.bindString(4, entity.getCARD_NAME());
        stmt.bindString(5, entity.getCARD_ADDRESS());
        stmt.bindString(6, entity.getMAIN_CARD_ID());
        stmt.bindString(7, entity.getCUSTOMER_ID());
        stmt.bindLong(8, entity.getCUSTOMER_TYPE());
        stmt.bindString(9, entity.getSUBCOM_CODE());
        stmt.bindString(10, entity.getBOOK_ID());
        stmt.bindLong(11, entity.getBOOK_SORT_INDEX());
        stmt.bindLong(12, entity.getPAY_METHOD());
        stmt.bindLong(13, entity.getPRICE_LIST_ID());
        stmt.bindLong(14, entity.getPRICE_CODE());
        stmt.bindLong(15, entity.getPRODUCER_ID());
        stmt.bindLong(16, entity.getMODELLD());
        stmt.bindLong(17, entity.getCALIBER_ID());
        stmt.bindLong(18, entity.getCALIBER_RANGE_ID());
        stmt.bindLong(19, entity.getBILLING_MONTH());
        stmt.bindLong(20, entity.getREAD_YEAR());
        stmt.bindLong(21, entity.getREAD_MONTH());
        stmt.bindLong(22, entity.getREAD_TIMES());
        stmt.bindLong(23, entity.getLAST_READ_WATER());
        stmt.bindLong(24, entity.getLAST_READING());
        stmt.bindLong(25, entity.getLAST_READ_STATE());
        stmt.bindLong(26, entity.getLAST_READ_DATE());
        stmt.bindLong(27, entity.getREADING());
        stmt.bindLong(28, entity.getREAD_STATE());
        stmt.bindString(29, entity.getREAD_STATE_CN());
        stmt.bindLong(30, entity.getREAD_DATE());
        stmt.bindLong(31, entity.getMETER_READER());
        stmt.bindLong(32, entity.getRECORD_ENTRY_USER());
        stmt.bindLong(33, entity.getNEXT_READ_DATE());
        stmt.bindLong(34, entity.getACC_WATER());
        stmt.bindDouble(35, entity.getLAST_BALANCE());
        stmt.bindDouble(36, entity.getBALANCE());
        stmt.bindDouble(37, entity.getACC_MONEY());
        stmt.bindDouble(38, entity.getACC_CHECK_MONEY());
        stmt.bindLong(39, entity.getCHECK_TIME());
        stmt.bindLong(40, entity.getCHECK_DATE());
        stmt.bindLong(41, entity.getCHECK_USER());
        stmt.bindDouble(42, entity.getPI_1MONEY());
        stmt.bindDouble(43, entity.getPI_2MONEY());
        stmt.bindDouble(44, entity.getPI_3MONEY());
        stmt.bindDouble(45, entity.getPI_4MONEY());
        stmt.bindDouble(46, entity.getPI_5MONEY());
        stmt.bindDouble(47, entity.getPI_6MONEY());
        stmt.bindLong(48, entity.getCHARGE_LIMIT_DATE());
        stmt.bindDouble(49, entity.getDUELATE_FEE());
        stmt.bindDouble(50, entity.getDELATE_FEE());
        stmt.bindDouble(51, entity.getACTUALLY_LATE_FEE());
        stmt.bindLong(52, entity.getPAY_TIME());
        stmt.bindLong(53, entity.getPAY_DATE());
        stmt.bindLong(54, entity.getCASHIER());
        stmt.bindLong(55, entity.getPWID());
        stmt.bindLong(56, entity.getPST_METHOD());
        stmt.bindLong(57, entity.getPAY_STATE());
        stmt.bindLong(58, entity.getPSUB_TOTALLD());
        stmt.bindLong(59, entity.getP_TOTALLD());
        stmt.bindLong(60, entity.getCHARGE_TIME());
        stmt.bindLong(61, entity.getPRINT_TIMES());
        stmt.bindLong(62, entity.getPRINT_DATE());
        stmt.bindString(63, entity.getINVOICE_CODE());
        stmt.bindLong(64, entity.getINVOICE_YEAR());
        stmt.bindString(65, entity.getINVOICE_NUMBER());
        stmt.bindLong(66, entity.getBANK_BATCH_FLAG());
        stmt.bindLong(67, entity.getBANK_BATCH_ID());
        stmt.bindLong(68, entity.getBANK_SEND_TIME());
        stmt.bindLong(69, entity.getLAST_FEE_ID());
        stmt.bindLong(70, entity.getORIGINAL_FEE_ID());
        stmt.bindLong(71, entity.getADJUST_ID());
        stmt.bindLong(72, entity.getADJUST_TYPE());
        stmt.bindLong(73, entity.getFEE_STATE());
        stmt.bindLong(74, entity.getPROCESS_STATE());
        stmt.bindLong(75, entity.getIS_VAT_USER() ? 1L: 0L);
        stmt.bindLong(76, entity.getPERSON_COUNT());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Charge readEntity(Cursor cursor, int offset) {
        Charge entity = new Charge( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getInt(offset + 1), // FEE_ID
            cursor.getString(offset + 2), // CARD_ID
            cursor.getString(offset + 3), // CARD_NAME
            cursor.getString(offset + 4), // CARD_ADDRESS
            cursor.getString(offset + 5), // MAIN_CARD_ID
            cursor.getString(offset + 6), // CUSTOMER_ID
            cursor.getInt(offset + 7), // CUSTOMER_TYPE
            cursor.getString(offset + 8), // SUBCOM_CODE
            cursor.getString(offset + 9), // BOOK_ID
            cursor.getInt(offset + 10), // BOOK_SORT_INDEX
            cursor.getInt(offset + 11), // PAY_METHOD
            cursor.getInt(offset + 12), // PRICE_LIST_ID
            cursor.getInt(offset + 13), // PRICE_CODE
            cursor.getInt(offset + 14), // PRODUCER_ID
            cursor.getInt(offset + 15), // MODELLD
            cursor.getInt(offset + 16), // CALIBER_ID
            cursor.getInt(offset + 17), // CALIBER_RANGE_ID
            cursor.getInt(offset + 18), // BILLING_MONTH
            cursor.getInt(offset + 19), // READ_YEAR
            cursor.getInt(offset + 20), // READ_MONTH
            cursor.getInt(offset + 21), // READ_TIMES
            cursor.getInt(offset + 22), // LAST_READ_WATER
            cursor.getInt(offset + 23), // LAST_READING
            cursor.getInt(offset + 24), // LAST_READ_STATE
            cursor.getLong(offset + 25), // LAST_READ_DATE
            cursor.getInt(offset + 26), // READING
            cursor.getInt(offset + 27), // READ_STATE
            cursor.getString(offset + 28), // READ_STATE_CN
            cursor.getLong(offset + 29), // READ_DATE
            cursor.getInt(offset + 30), // METER_READER
            cursor.getInt(offset + 31), // RECORD_ENTRY_USER
            cursor.getInt(offset + 32), // NEXT_READ_DATE
            cursor.getInt(offset + 33), // ACC_WATER
            cursor.getDouble(offset + 34), // LAST_BALANCE
            cursor.getDouble(offset + 35), // BALANCE
            cursor.getDouble(offset + 36), // ACC_MONEY
            cursor.getDouble(offset + 37), // ACC_CHECK_MONEY
            cursor.getLong(offset + 38), // CHECK_TIME
            cursor.getInt(offset + 39), // CHECK_DATE
            cursor.getInt(offset + 40), // CHECK_USER
            cursor.getDouble(offset + 41), // PI_1MONEY
            cursor.getDouble(offset + 42), // PI_2MONEY
            cursor.getDouble(offset + 43), // PI_3MONEY
            cursor.getDouble(offset + 44), // PI_4MONEY
            cursor.getDouble(offset + 45), // PI_5MONEY
            cursor.getDouble(offset + 46), // PI_6MONEY
            cursor.getLong(offset + 47), // CHARGE_LIMIT_DATE
            cursor.getDouble(offset + 48), // DUELATE_FEE
            cursor.getDouble(offset + 49), // DELATE_FEE
            cursor.getDouble(offset + 50), // ACTUALLY_LATE_FEE
            cursor.getLong(offset + 51), // PAY_TIME
            cursor.getInt(offset + 52), // PAY_DATE
            cursor.getInt(offset + 53), // CASHIER
            cursor.getInt(offset + 54), // PWID
            cursor.getInt(offset + 55), // PST_METHOD
            cursor.getInt(offset + 56), // PAY_STATE
            cursor.getInt(offset + 57), // PSUB_TOTALLD
            cursor.getInt(offset + 58), // P_TOTALLD
            cursor.getLong(offset + 59), // CHARGE_TIME
            cursor.getInt(offset + 60), // PRINT_TIMES
            cursor.getLong(offset + 61), // PRINT_DATE
            cursor.getString(offset + 62), // INVOICE_CODE
            cursor.getInt(offset + 63), // INVOICE_YEAR
            cursor.getString(offset + 64), // INVOICE_NUMBER
            cursor.getInt(offset + 65), // BANK_BATCH_FLAG
            cursor.getInt(offset + 66), // BANK_BATCH_ID
            cursor.getLong(offset + 67), // BANK_SEND_TIME
            cursor.getInt(offset + 68), // LAST_FEE_ID
            cursor.getInt(offset + 69), // ORIGINAL_FEE_ID
            cursor.getInt(offset + 70), // ADJUST_ID
            cursor.getInt(offset + 71), // ADJUST_TYPE
            cursor.getInt(offset + 72), // FEE_STATE
            cursor.getInt(offset + 73), // PROCESS_STATE
            cursor.getShort(offset + 74) != 0, // IS_VAT_USER
            cursor.getInt(offset + 75) // PERSON_COUNT
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Charge entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFEE_ID(cursor.getInt(offset + 1));
        entity.setCARD_ID(cursor.getString(offset + 2));
        entity.setCARD_NAME(cursor.getString(offset + 3));
        entity.setCARD_ADDRESS(cursor.getString(offset + 4));
        entity.setMAIN_CARD_ID(cursor.getString(offset + 5));
        entity.setCUSTOMER_ID(cursor.getString(offset + 6));
        entity.setCUSTOMER_TYPE(cursor.getInt(offset + 7));
        entity.setSUBCOM_CODE(cursor.getString(offset + 8));
        entity.setBOOK_ID(cursor.getString(offset + 9));
        entity.setBOOK_SORT_INDEX(cursor.getInt(offset + 10));
        entity.setPAY_METHOD(cursor.getInt(offset + 11));
        entity.setPRICE_LIST_ID(cursor.getInt(offset + 12));
        entity.setPRICE_CODE(cursor.getInt(offset + 13));
        entity.setPRODUCER_ID(cursor.getInt(offset + 14));
        entity.setMODELLD(cursor.getInt(offset + 15));
        entity.setCALIBER_ID(cursor.getInt(offset + 16));
        entity.setCALIBER_RANGE_ID(cursor.getInt(offset + 17));
        entity.setBILLING_MONTH(cursor.getInt(offset + 18));
        entity.setREAD_YEAR(cursor.getInt(offset + 19));
        entity.setREAD_MONTH(cursor.getInt(offset + 20));
        entity.setREAD_TIMES(cursor.getInt(offset + 21));
        entity.setLAST_READ_WATER(cursor.getInt(offset + 22));
        entity.setLAST_READING(cursor.getInt(offset + 23));
        entity.setLAST_READ_STATE(cursor.getInt(offset + 24));
        entity.setLAST_READ_DATE(cursor.getLong(offset + 25));
        entity.setREADING(cursor.getInt(offset + 26));
        entity.setREAD_STATE(cursor.getInt(offset + 27));
        entity.setREAD_STATE_CN(cursor.getString(offset + 28));
        entity.setREAD_DATE(cursor.getLong(offset + 29));
        entity.setMETER_READER(cursor.getInt(offset + 30));
        entity.setRECORD_ENTRY_USER(cursor.getInt(offset + 31));
        entity.setNEXT_READ_DATE(cursor.getInt(offset + 32));
        entity.setACC_WATER(cursor.getInt(offset + 33));
        entity.setLAST_BALANCE(cursor.getDouble(offset + 34));
        entity.setBALANCE(cursor.getDouble(offset + 35));
        entity.setACC_MONEY(cursor.getDouble(offset + 36));
        entity.setACC_CHECK_MONEY(cursor.getDouble(offset + 37));
        entity.setCHECK_TIME(cursor.getLong(offset + 38));
        entity.setCHECK_DATE(cursor.getInt(offset + 39));
        entity.setCHECK_USER(cursor.getInt(offset + 40));
        entity.setPI_1MONEY(cursor.getDouble(offset + 41));
        entity.setPI_2MONEY(cursor.getDouble(offset + 42));
        entity.setPI_3MONEY(cursor.getDouble(offset + 43));
        entity.setPI_4MONEY(cursor.getDouble(offset + 44));
        entity.setPI_5MONEY(cursor.getDouble(offset + 45));
        entity.setPI_6MONEY(cursor.getDouble(offset + 46));
        entity.setCHARGE_LIMIT_DATE(cursor.getLong(offset + 47));
        entity.setDUELATE_FEE(cursor.getDouble(offset + 48));
        entity.setDELATE_FEE(cursor.getDouble(offset + 49));
        entity.setACTUALLY_LATE_FEE(cursor.getDouble(offset + 50));
        entity.setPAY_TIME(cursor.getLong(offset + 51));
        entity.setPAY_DATE(cursor.getInt(offset + 52));
        entity.setCASHIER(cursor.getInt(offset + 53));
        entity.setPWID(cursor.getInt(offset + 54));
        entity.setPST_METHOD(cursor.getInt(offset + 55));
        entity.setPAY_STATE(cursor.getInt(offset + 56));
        entity.setPSUB_TOTALLD(cursor.getInt(offset + 57));
        entity.setP_TOTALLD(cursor.getInt(offset + 58));
        entity.setCHARGE_TIME(cursor.getLong(offset + 59));
        entity.setPRINT_TIMES(cursor.getInt(offset + 60));
        entity.setPRINT_DATE(cursor.getLong(offset + 61));
        entity.setINVOICE_CODE(cursor.getString(offset + 62));
        entity.setINVOICE_YEAR(cursor.getInt(offset + 63));
        entity.setINVOICE_NUMBER(cursor.getString(offset + 64));
        entity.setBANK_BATCH_FLAG(cursor.getInt(offset + 65));
        entity.setBANK_BATCH_ID(cursor.getInt(offset + 66));
        entity.setBANK_SEND_TIME(cursor.getLong(offset + 67));
        entity.setLAST_FEE_ID(cursor.getInt(offset + 68));
        entity.setORIGINAL_FEE_ID(cursor.getInt(offset + 69));
        entity.setADJUST_ID(cursor.getInt(offset + 70));
        entity.setADJUST_TYPE(cursor.getInt(offset + 71));
        entity.setFEE_STATE(cursor.getInt(offset + 72));
        entity.setPROCESS_STATE(cursor.getInt(offset + 73));
        entity.setIS_VAT_USER(cursor.getShort(offset + 74) != 0);
        entity.setPERSON_COUNT(cursor.getInt(offset + 75));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Charge entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Charge entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Charge entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

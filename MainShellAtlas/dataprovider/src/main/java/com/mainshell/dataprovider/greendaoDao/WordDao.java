package com.mainshell.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mainshell.dataprovider.greendaoEntity.Word;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MS_WORDS".
*/
public class WordDao extends AbstractDao<Word, Long> {

    public static final String TABLENAME = "MS_WORDS";

    /**
     * Properties of entity Word.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "ID");
        public final static Property I_WID = new Property(1, int.class, "I_WID", false, "I__WID");
        public final static Property S_WNAME = new Property(2, String.class, "S_WNAME", false, "S__WNAME");
        public final static Property S_WVALUE = new Property(3, String.class, "S_WVALUE", false, "S__WVALUE");
        public final static Property S_WVALUEEX = new Property(4, String.class, "S_WVALUEEX", false, "S__WVALUEEX");
        public final static Property S_WGROUP = new Property(5, String.class, "S_WGROUP", false, "S__WGROUP");
        public final static Property I_WPARENTID = new Property(6, Integer.class, "I_WPARENTID", false, "I__WPARENTID");
        public final static Property S_WREMARK = new Property(7, String.class, "S_WREMARK", false, "S__WREMARK");
    }


    public WordDao(DaoConfig config) {
        super(config);
    }
    
    public WordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MS_WORDS\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"I__WID\" INTEGER NOT NULL ," + // 1: I_WID
                "\"S__WNAME\" TEXT," + // 2: S_WNAME
                "\"S__WVALUE\" TEXT," + // 3: S_WVALUE
                "\"S__WVALUEEX\" TEXT," + // 4: S_WVALUEEX
                "\"S__WGROUP\" TEXT," + // 5: S_WGROUP
                "\"I__WPARENTID\" INTEGER," + // 6: I_WPARENTID
                "\"S__WREMARK\" TEXT);"); // 7: S_WREMARK
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MS_WORDS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Word entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getI_WID());
 
        String S_WNAME = entity.getS_WNAME();
        if (S_WNAME != null) {
            stmt.bindString(3, S_WNAME);
        }
 
        String S_WVALUE = entity.getS_WVALUE();
        if (S_WVALUE != null) {
            stmt.bindString(4, S_WVALUE);
        }
 
        String S_WVALUEEX = entity.getS_WVALUEEX();
        if (S_WVALUEEX != null) {
            stmt.bindString(5, S_WVALUEEX);
        }
 
        String S_WGROUP = entity.getS_WGROUP();
        if (S_WGROUP != null) {
            stmt.bindString(6, S_WGROUP);
        }
 
        Integer I_WPARENTID = entity.getI_WPARENTID();
        if (I_WPARENTID != null) {
            stmt.bindLong(7, I_WPARENTID);
        }
 
        String S_WREMARK = entity.getS_WREMARK();
        if (S_WREMARK != null) {
            stmt.bindString(8, S_WREMARK);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Word entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getI_WID());
 
        String S_WNAME = entity.getS_WNAME();
        if (S_WNAME != null) {
            stmt.bindString(3, S_WNAME);
        }
 
        String S_WVALUE = entity.getS_WVALUE();
        if (S_WVALUE != null) {
            stmt.bindString(4, S_WVALUE);
        }
 
        String S_WVALUEEX = entity.getS_WVALUEEX();
        if (S_WVALUEEX != null) {
            stmt.bindString(5, S_WVALUEEX);
        }
 
        String S_WGROUP = entity.getS_WGROUP();
        if (S_WGROUP != null) {
            stmt.bindString(6, S_WGROUP);
        }
 
        Integer I_WPARENTID = entity.getI_WPARENTID();
        if (I_WPARENTID != null) {
            stmt.bindLong(7, I_WPARENTID);
        }
 
        String S_WREMARK = entity.getS_WREMARK();
        if (S_WREMARK != null) {
            stmt.bindString(8, S_WREMARK);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Word readEntity(Cursor cursor, int offset) {
        Word entity = new Word( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getInt(offset + 1), // I_WID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // S_WNAME
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // S_WVALUE
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // S_WVALUEEX
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // S_WGROUP
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // I_WPARENTID
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // S_WREMARK
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Word entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setI_WID(cursor.getInt(offset + 1));
        entity.setS_WNAME(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setS_WVALUE(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setS_WVALUEEX(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setS_WGROUP(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setI_WPARENTID(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setS_WREMARK(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Word entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Word entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Word entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

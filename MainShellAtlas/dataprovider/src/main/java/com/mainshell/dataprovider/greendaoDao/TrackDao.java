package com.mainshell.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mainshell.dataprovider.greendaoEntity.Track;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MS_TRACK".
*/
public class TrackDao extends AbstractDao<Track, Long> {

    public static final String TABLENAME = "MS_TRACK";

    /**
     * Properties of entity Track.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "ID");
        public final static Property S_USERID = new Property(1, String.class, "S_USERID", false, "S__USERID");
        public final static Property S_DEVICEID = new Property(2, String.class, "S_DEVICEID", false, "S__DEVICEID");
        public final static Property S_LOCATIONTYPE = new Property(3, String.class, "S_LOCATIONTYPE", false, "S__LOCATIONTYPE");
        public final static Property D_LONGITUDE = new Property(4, double.class, "D_LONGITUDE", false, "D__LONGITUDE");
        public final static Property D_LATITUDE = new Property(5, double.class, "D_LATITUDE", false, "D__LATITUDE");
        public final static Property F_RADIUS = new Property(6, float.class, "F_RADIUS", false, "F__RADIUS");
        public final static Property D_ALTITUDE = new Property(7, double.class, "D_ALTITUDE", false, "D__ALTITUDE");
        public final static Property F_DIRECTION = new Property(8, float.class, "F_DIRECTION", false, "F__DIRECTION");
        public final static Property F_SPEED = new Property(9, float.class, "F_SPEED", false, "F__SPEED");
        public final static Property L_TIME = new Property(10, long.class, "L_TIME", false, "L__TIME");
        public final static Property I_SHANGCHUANGBZ = new Property(11, int.class, "I_SHANGCHUANGBZ", false, "I__SHANGCHUANGBZ");
        public final static Property S_EXTEND = new Property(12, String.class, "S_EXTEND", false, "S__EXTEND");
    }


    public TrackDao(DaoConfig config) {
        super(config);
    }
    
    public TrackDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MS_TRACK\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"S__USERID\" TEXT NOT NULL ," + // 1: S_USERID
                "\"S__DEVICEID\" TEXT NOT NULL ," + // 2: S_DEVICEID
                "\"S__LOCATIONTYPE\" TEXT NOT NULL ," + // 3: S_LOCATIONTYPE
                "\"D__LONGITUDE\" REAL NOT NULL ," + // 4: D_LONGITUDE
                "\"D__LATITUDE\" REAL NOT NULL ," + // 5: D_LATITUDE
                "\"F__RADIUS\" REAL NOT NULL ," + // 6: F_RADIUS
                "\"D__ALTITUDE\" REAL NOT NULL ," + // 7: D_ALTITUDE
                "\"F__DIRECTION\" REAL NOT NULL ," + // 8: F_DIRECTION
                "\"F__SPEED\" REAL NOT NULL ," + // 9: F_SPEED
                "\"L__TIME\" INTEGER NOT NULL ," + // 10: L_TIME
                "\"I__SHANGCHUANGBZ\" INTEGER NOT NULL ," + // 11: I_SHANGCHUANGBZ
                "\"S__EXTEND\" TEXT);"); // 12: S_EXTEND
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MS_TRACK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Track entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindString(2, entity.getS_USERID());
        stmt.bindString(3, entity.getS_DEVICEID());
        stmt.bindString(4, entity.getS_LOCATIONTYPE());
        stmt.bindDouble(5, entity.getD_LONGITUDE());
        stmt.bindDouble(6, entity.getD_LATITUDE());
        stmt.bindDouble(7, entity.getF_RADIUS());
        stmt.bindDouble(8, entity.getD_ALTITUDE());
        stmt.bindDouble(9, entity.getF_DIRECTION());
        stmt.bindDouble(10, entity.getF_SPEED());
        stmt.bindLong(11, entity.getL_TIME());
        stmt.bindLong(12, entity.getI_SHANGCHUANGBZ());
 
        String S_EXTEND = entity.getS_EXTEND();
        if (S_EXTEND != null) {
            stmt.bindString(13, S_EXTEND);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Track entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindString(2, entity.getS_USERID());
        stmt.bindString(3, entity.getS_DEVICEID());
        stmt.bindString(4, entity.getS_LOCATIONTYPE());
        stmt.bindDouble(5, entity.getD_LONGITUDE());
        stmt.bindDouble(6, entity.getD_LATITUDE());
        stmt.bindDouble(7, entity.getF_RADIUS());
        stmt.bindDouble(8, entity.getD_ALTITUDE());
        stmt.bindDouble(9, entity.getF_DIRECTION());
        stmt.bindDouble(10, entity.getF_SPEED());
        stmt.bindLong(11, entity.getL_TIME());
        stmt.bindLong(12, entity.getI_SHANGCHUANGBZ());
 
        String S_EXTEND = entity.getS_EXTEND();
        if (S_EXTEND != null) {
            stmt.bindString(13, S_EXTEND);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Track readEntity(Cursor cursor, int offset) {
        Track entity = new Track( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getString(offset + 1), // S_USERID
            cursor.getString(offset + 2), // S_DEVICEID
            cursor.getString(offset + 3), // S_LOCATIONTYPE
            cursor.getDouble(offset + 4), // D_LONGITUDE
            cursor.getDouble(offset + 5), // D_LATITUDE
            cursor.getFloat(offset + 6), // F_RADIUS
            cursor.getDouble(offset + 7), // D_ALTITUDE
            cursor.getFloat(offset + 8), // F_DIRECTION
            cursor.getFloat(offset + 9), // F_SPEED
            cursor.getLong(offset + 10), // L_TIME
            cursor.getInt(offset + 11), // I_SHANGCHUANGBZ
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // S_EXTEND
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Track entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setS_USERID(cursor.getString(offset + 1));
        entity.setS_DEVICEID(cursor.getString(offset + 2));
        entity.setS_LOCATIONTYPE(cursor.getString(offset + 3));
        entity.setD_LONGITUDE(cursor.getDouble(offset + 4));
        entity.setD_LATITUDE(cursor.getDouble(offset + 5));
        entity.setF_RADIUS(cursor.getFloat(offset + 6));
        entity.setD_ALTITUDE(cursor.getDouble(offset + 7));
        entity.setF_DIRECTION(cursor.getFloat(offset + 8));
        entity.setF_SPEED(cursor.getFloat(offset + 9));
        entity.setL_TIME(cursor.getLong(offset + 10));
        entity.setI_SHANGCHUANGBZ(cursor.getInt(offset + 11));
        entity.setS_EXTEND(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Track entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Track entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Track entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
